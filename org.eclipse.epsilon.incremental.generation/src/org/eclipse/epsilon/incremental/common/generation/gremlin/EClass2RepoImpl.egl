[%
/*******************************************************************************
 * Copyright (c) 2017 The University of York.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Horacio Hoyos Rodriguez - initial API and implementation
 ******************************************************************************/
import "../Ecore2JavaTemplates.egl";
%]
[%=getHeader()%]
package [%=qp%].trace.impl;

import java.util.Set;

import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource;
import org.apache.tinkerpop.gremlin.structure.Graph;
import org.apache.tinkerpop.gremlin.structure.Vertex;
import org.apache.tinkerpop.gremlin.structure.util.Attachable;
import org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertex;
import [%=qp%].trace.[%=ec.getJavaInterfaceName(interPrefix, interSufix)%];
import [%=qp%].trace.[%=ec.getJavaInterfaceName(interPrefix, interSufix)%]Repository;
[%
var superClass = ec.getESuperTypes().first();
var extends = null;
var name = ec.getJavaClassName(classPrefix, classSufix) + "RepositoryImpl";
var implements = ec.getJavaInterfaceName(interPrefix, interSufix) + "Repository";
var extendGeneric = ec.getJavaInterfaceName(interPrefix, interSufix);
if (ec.isAbstract) {
    name = name + "<E extends " + ec.getJavaInterfaceName(interPrefix, interSufix) + ">";
    implements = implements + "<E>";
    extendGeneric = "E";
}
if (not superClass.isInterface) {
    extends = superClass.getJavaClassName(classPrefix, classSufix) + "RepositoryImpl<" + ec.getJavaInterfaceName(interPrefix, interSufix) + ">";    
    var erqp = superClass.getCorrectPackage(qp+".trace", ec);%]
import [%=erqp%].impl.[%=superClass.getJavaClassName(classPrefix, classSufix)%]RepositoryImpl;
[%
}
%]
[%=out.startPreserve("/**", "**/", ec.name + "RepositoryImplImports", true)%]

[%=out.stopPreserve()%]

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.inject.Guice;
import com.google.inject.Injector;
import com.google.inject.Module;

public [%if(ec.isAbstract){%]abstract [%}%]class [%=name%][%if(extends.isDefined()){%] extends [%=extends%][%}%] implements [%=implements%] {

    private static final Logger logger = LoggerFactory.getLogger([%=ec.getJavaClassName(classPrefix, classSufix)%]RepositoryImpl.class);
 
[%if(not extends.isDefined()){%]
    protected Graph extent;    
[%}%]
    
    public [%=ec.getJavaClassName(classPrefix, classSufix)%]RepositoryImpl() {
    }

[%if (not ec.isAbstract){%]    
    @Override
    public boolean add([%=extendGeneric%] item) {
        logger.info("Adding {} to repository", item);
        [%=ec.getJavaClassName(classPrefix, classSufix)%] impl = ([%=ec.getJavaClassName(classPrefix, classSufix)%])item;
        Vertex a = ((DetachedVertex)impl.delegate()).attach(Attachable.Method.getOrCreate(extent));
        return a.graph() != null;
    }

    @Override
    public boolean remove([%=extendGeneric%] item) {
        logger.info("Removing {} from repository", item);
        Vertex v = (([%=ec.getJavaClassName(classPrefix, classSufix)%])item).delegate();
        v.remove();
        return v.graph() == null;
    }
  
    @Override
    public [%=ec.getJavaInterfaceName(interPrefix, interSufix)%] get(Object id) {
        
        logger.debug("Get [%=ec.name%] with id:{}", id);
        [%=ec.getJavaClassName(classPrefix, classSufix)%] result = null;
        GraphTraversalSource g = new GraphTraversalSource(extent);
        Vertex v = g.V(id).next();
        if (v != null) {
            result = new [%=ec.getJavaClassName(classPrefix, classSufix)%]();
            result.delegate(v);
            result.graph(extent);
        }
        return result;
    }
[%}%]

[%if(not extends.isDefined()){%]
    public void injectGraph(Module tinkerpopGuiceModule) {
        Injector injector = Guice.createInjector(tinkerpopGuiceModule);
        Graph g = injector.getInstance(Graph.class);
        this.extent = g;
    }
[%}%]    
    
    [%=out.startPreserve("/**", "**/", ec.getJavaClassName(interPrefix, interSufix) + "Repositry", true)%]
    // Specialised search methods

    [%=out.stopPreserve()%]

}