[%
/*******************************************************************************
 * Copyright (c) 2017 The University of York.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Horacio Hoyos Rodriguez - initial API and implementation
 ******************************************************************************/
/**
 * Create an abstract implementation of IModel that implements methods that depend on the types
 * defined by the metamodel. The main idea is to provide a Model that conforms to a specific
 * metamodel without needing the enclosing plugin to depend on EMF (i.e. this methods could
 * be easily implemented by using the EMF api.) 
 */

// We need the list of classes all the time
var eClasses = p.getEClassifiers().select(ec | ec.isTypeOf(ecore!EClass) and not ec.isInterface());
// And the implementable ones
var eClassesImpl = eClasses.select(ec | not ec.isAbstract);
%]
[%=getHeader()%]
package [%=qp%].models;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.eclipse.epsilon.common.util.StringProperties;
import org.eclipse.epsilon.eol.compile.m3.Metamodel;
import org.eclipse.epsilon.eol.exceptions.models.EolModelElementTypeNotFoundException;
[%if (baseLanguage.isDefined()) {%]
import org.eclipse.epsilon.[%=baseLanguage%].incremental.models.Abstract[%=baseLanguage.firstToUpperCase()%]TraceModel;
[%}%]
import org.eclipse.epsilon.eol.models.IRelativePathResolver;
[%if (not baseLanguage.isDefined()) {%]
import org.eclipse.epsilon.eol.models.Model;
[%} else {%]
import org.eclipse.epsilon.eol.incremental.models.ITraceModel;
import org.eclipse.epsilon.[%=baseLanguage%].incremental.trace.*;
[%}%]
import org.eclipse.epsilon.[%=p.getName()%].incremental.trace.*;


[%var baseClass = "Model";
if (baseLanguage.isDefined()) {
    baseClass = "Abstract" + baseLanguage.firstToUpperCase() + "TraceModel";
}%]
public abstract class Abstract[%=p.getName().firstToUpperCase()%]TraceModel extends [%=baseClass%] implements ITraceModel  {
 
    private static final Set<String> KNOWN_TYPES = Collections.unmodifiableSet(
            new HashSet<String>(Arrays.asList(
                    new String[] {[%=eClasses.collect(ec | "\""  + ec.name + "\"").concat(",")%]}
                ))
            );
    
    private static final Set<String> INSTANTIATABLE_TYPES = Collections.unmodifiableSet(
            new HashSet<String>(Arrays.asList(
                    new String[] {[%=eClasses.collect(ec | "\""  + ec.name + "\"").concat(",")%]}
                ))
            );
    
    private static final Map<String, Set<String>> TYPE_HIERARCHY;
    static {
        TYPE_HIERARCHY = new HashMap<String, Set<String>>();[%
for (ec in eClasses) {
    var supers = ec.getEAllSuperTypes().including(ec).collect(sc | "\""  + sc.name + "\"").concat(",");%]
    
        TYPE_HIERARCHY.put("[%=ec.name%]", new HashSet<String>(Arrays.asList(new String[]{[%=supers%]})));[%}%]        
    }
    
    private static final Map<String, Set<String>> TYPE_PROPERTIES;
    static {
        TYPE_PROPERTIES = new HashMap<String, Set<String>>();[%
for (ec in eClasses) {
    var props = ec.getEAllStructuralFeatures().collect(sf | "\""  + sf.name + "\"").concat(",");%]
    
        TYPE_PROPERTIES.put("[%=ec.name%]", new HashSet<String>(Arrays.asList(new String[]{[%=props%]})));[%}%]        
    }
    
    
    
    @Override
    public Metamodel getMetamodel(StringProperties properties, IRelativePathResolver resolver) {
        // TODO Generate Abstract[%=p.getName().firstToUpperCase()%]TraceModel.getMetamodel
        return null;
    }
    
    @Override
    public String getTypeNameOf(Object instance) {
        if (!isModelElement(instance))
            throw new IllegalArgumentException("Not a valid Trace model element: " + instance + " (" + instance.getClass().getCanonicalName() + ") ");
    
        return ((Class<?>)getTypeOf(instance)).getName();
    }
    
    @Override
    public Object getTypeOf(Object instance) {
[%if (baseLanguage.isDefined()) {%]
        Object type = super.getTypeOf(instance);
        if (type == null) {
[%} else {%]
        Object type = null;
        {
[%}
var cond = "if";
for (ec in eClasses) {%]
            [%=cond%] (instance instanceof [%=ec.name%]) {
                type = [%=ec.name%].class;
            }
            
[%  cond = "else if";
}%]
        }       
        return type;
    }
    
    @Override
    public boolean hasType(String type) {
[%if (baseLanguage.isDefined()) {%]
        boolean result = super.hasType(type);
        if (!result) {
[%} else {%]
        boolean result = false;
        {
[%}%]
            result = KNOWN_TYPES.contains(type);
        }
        return result;
    }
    
    @Override
    public boolean isInstantiable(String type) {
        if (!hasType(type)) {
            return false;
        }
[%if (baseLanguage.isDefined()) {%]
        boolean result = super.isInstantiable(type);
        if (!result) {
[%} else {%]
        boolean result = false;
        {
[%}%]        
            result = INSTANTIATABLE_TYPES.contains(type);
        }
        return result;
    }
    
    @Override
    public boolean isModelElement(Object instance) {
        return instance instanceof IdElement;
    }
    
    @Override
    public boolean isOfKind(Object instance, String type) throws EolModelElementTypeNotFoundException {
[%if (baseLanguage.isDefined()) {%]
        boolean result = super.isOfKind(instance, type);
        if (!result) {
[%} else {%]
        boolean result = false;
        {
[%}
var cond = "if";     
for (ec in eClasses) {%]

	        [%=cond%]  (instance instanceof [%=ec.name%]) {
	            result = TYPE_HIERARCHY.get("[%=ec.name%]").contains(type);
	        }
[%  cond = "else if";
}%]
        } 
        return result;
    }
    
    @Override
    public boolean isOfType(Object instance, String type) throws EolModelElementTypeNotFoundException {
[%if (baseLanguage.isDefined()) {%]
        boolean result = super.isOfType(instance, type);
        if (!result) {
[%} else {%]
        boolean result = false;
        {
[%}
var cond = "if";
for (ec in eClasses) {%]

	        [%=cond%]  (instance instanceof [%=ec.name%]) {
	            result = "[%=ec.name%]".equals(type);
	        }
[%  cond = "else if";
}%]
        }
        return result;
    }
  
    @Override
    public boolean knowsAboutProperty(Object instance, String property) {
[%if (baseLanguage.isDefined()) {%]
        boolean result = super.knowsAboutProperty(instance, property);
        if (!result) {
[%} else {%]
        boolean result = false;
        {
[%}
var cond = "if";
for (ec in eClasses) {%]
        
	        [%=cond%]  (instance instanceof [%=ec.name%]) {
	            result = TYPE_PROPERTIES.get("[%=ec.name%]").contains(property);
	        }
[%  cond = "else if";
}%]
        }
        return result;
    }    
    
}