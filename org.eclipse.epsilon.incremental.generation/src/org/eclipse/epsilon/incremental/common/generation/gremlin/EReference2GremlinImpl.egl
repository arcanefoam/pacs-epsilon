[%
/*******************************************************************************
 * Copyright (c) 2017 The University of York.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Horacio Hoyos Rodriguez - initial API and implementation
 ******************************************************************************/
/**
 * A template to generate an implementation of an EClass that can be used as a DTO.
 */
import "../Ecore2JavaTemplates.egl";
var sourceType = er.getEContainingClass().getJavaInterfaceName(interPrefix, interSufix);
var targetType = er.getEReferenceType().getJavaInterfaceName(interPrefix, interSufix);
var targetTypeImpl = er.getEReferenceType().getJavaClassName(classPrefix, classSufix);
var unique = "true";
if (not er.isUnique()) { unique = "false";}
var opposite;
var opp_many = false;
if (er.getEOpposite().isDefined()) {
    opposite = er.getEOpposite().name;
    opp_many = er.getEOpposite().isMany();
}
var pack = er.getEReferenceType().getEPackage().name;
var erqp = qp.replace("." + er.getEContainingClass().getEPackage().name + ".", "." + pack + ".");
%]
[%=getHeader()%]
package [%=qp%].trace.impl;

import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource;
import org.apache.tinkerpop.gremlin.structure.*;
import org.eclipse.epsilon.base.incremental.trace.gremlin.impl.GremlinWrapper;
import [%=qp%].trace.[%=sourceType%];
import [%=erqp%].trace.[%=targetType%];
import [%=qp%].trace.[%=er.getRelationJavaInterfaceName(interPrefix, interSufix)%];
import org.eclipse.epsilon.base.incremental.trace.impl.Feature;
[%if (er.isMany()) {%]
import java.util.Iterator;
import org.eclipse.epsilon.base.incremental.trace.gremlin.util.GremlinUtils;
import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal;
[%} else {%]
import [%=qp%].util.TraceFactory;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
[%}%]


/**
 * Implementation of [%=er.getRelationJavaInterfaceName(interPrefix, interSufix)%] reference. 
 */
public class [%=er.getRelationJavaClassName(classPrefix, classSufix)%] extends Feature
        implements [%=er.getRelationJavaInterfaceName(interPrefix, interSufix)%], GremlinWrapper<Edge> {
    
    /** A reference to the graph to use in iterations */
    private Graph graph;
    
    /** The graph traversal source for all navigations */
    private GraphTraversalSource g;
    
    /** The source(s) of the reference */
    protected [%=sourceType%] source;
    
[%if (not er.isMany()) {%]
    /** Fast access for single-valued references */
    private Edge delegate;
[%}%] 
    
    /**
     * Instantiates a new [%=er.getRelationJavaInterfaceName(interPrefix, interSufix)%].
     *
     * @param source the source of the reference
     */
    public [%=er.getRelationJavaClassName(classPrefix, classSufix)%] ([%=sourceType%] source) {
        super([%=unique%]);
        this.source = source;
    }
    
    // PUBLIC API
        
    @Override
[%if (er.isMany()) {%]
    public Iterator<[%=targetType%]> get() {
        return new GremlinUtils.IncrementalFactoryIterator<[%=targetType%], Vertex>(getRaw(), graph);
    }
    
    /**
     * Get the Tinkerpop GraphTraversal iterator of the vertices that are part of the relation.
     */
    public  GraphTraversal<Vertex, Vertex> getRaw() {
        return g.V(source.getId()).outE("moduleElements").toV(Direction.OUT);
    }
[%} else {%]
    public [%=targetType%] get() {
        Vertex to = g.E(delegate).outV().next();
        /*
        [%=targetTypeImpl%] retVal = new [%=targetTypeImpl%]();
        retVal.delegate(to);
        retVal.graph(graph);
        */
        return ([%=targetType%]) TraceFactory.createModuleElementTrace(to, graph);
    }
[%}%]    

    @Override
    public boolean create([%=targetType%] target) {
        if (conflict(target)) {
            return false;
        }
[%if (opposite.isDefined()) {%]
        target.[%=opposite%]().set(source);
        if (related(target)) {
            return false;
        }
[%}%]
        set(target);
        return true;
    }

    @Override
    public boolean destroy([%=targetType%] target) {
        if (!related(target)) {
            return false;
        }
[%if (opposite.isDefined()) {%]
        target.[%=opposite%]().remove(source);
[%}%]
        remove(target);
        return true;
    }
    
    @Override
    public boolean conflict([%=targetType%] target) {
        boolean result = false;
[%if (er.isMany()) {%]
        if (isUnique) {
            result |= g.V(source.getId()).out("[%=er.name%]").hasId(target.getId()).hasNext();
        }
[%} else {%]
        result |= g.E(delegate).outV().hasId(target.getId()).hasNext();
[%}
if (opposite.isDefined() and opp_many) {%]
		Iterable<[%=sourceType%]> iterable = () -> target.[%=opposite%]().get();
		Stream<[%=sourceType%]> targetStream = StreamSupport.stream(iterable.spliterator(), false);
        result |= target.[%=opposite%]().isUnique() &&
        	targetStream.anyMatch(source::equals);
[%} else if (opposite.isDefined()) {%]
        result |= target.[%=opposite%]().get() != null;
[%}%]
        return result;
    }
    
    @Override
    public boolean related([%=targetType%] target) {
    	if (target == null) {
			return false;
		}
[%var sourceRel;
if (er.isMany()) {
    sourceRel = "g.V(source.getId()).out(\"" + er.name + "\").hasId(target.getId()).hasNext()";
} else {
    sourceRel = "g.E(delegate).outV().id().next().equals(target.getId())";
}
// If there is an opposite, need to check that too. The check depends on the
// multiplicity of the opposite
var targetRel = ";";
if (opposite.isDefined()) {
    if (opp_many) {%]        
		Iterable<[%=sourceType%]> iterable = () -> target.[%=opposite%]().get();
		Stream<[%=sourceType%]> targetStream = StreamSupport.stream(iterable.spliterator(), false);
[%      targetRel = " && targetStream.anyMatch(source::equals);";%]
[%  } else {
        targetRel = " && source.equals(target." + opposite + "().get());";%]
[%  }
}%]
		return [%=sourceRel%][%=targetRel%]
	}
	
	@Override
    public Edge delegate() {
[%if (not er.isMany()) {%]
        return delegate;
[%} else {%]
        return null;
[%}%]
    }

    @Override
    public void delegate(Edge delegate) {
[%if (not er.isMany()) {%]
        this.delegate = delegate;
[%}%]
    }
    
    @Override
    public Graph graph() {
        return graph;    
    }

    @Override
    public void graph(Graph graph) {
        this.g = new GraphTraversalSource(graph);
        this.graph = graph;
    }
        
    
    // PRIVATE API
    
    @Override
    public void set([%=targetType%] target) {
[%if (er.isMany()) {%]
        g.V(source.getId()).addE("elements").to(g.V(target.getId())).iterate();
[%} else {%]
        delegate = g.V(source.getId()).addE("modelTrace").to(g.V(target.getId())).next();
[%}%]
    }
    
    @Override
    public void remove([%=targetType%] target) {
[%if (er.isMany()) {%]
        g.V(source.getId()).outE("elements").as("e").inV().hasId(target.getId()).select("e").drop().iterate();
[%} else {%]
        g.E(delegate).drop();
        delegate = null;
[%}%]
    }

}