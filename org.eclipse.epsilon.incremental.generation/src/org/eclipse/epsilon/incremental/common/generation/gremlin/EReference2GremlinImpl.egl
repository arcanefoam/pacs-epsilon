[%
/*******************************************************************************
 * Copyright (c) 2017 The University of York.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Horacio Hoyos Rodriguez - initial API and implementation
 ******************************************************************************/
/**
 * A template to generate an implementation of an EClass that can be used as a DTO.
 */
import "../Ecore2JavaTemplates.egl";
var sourceType = er.getEContainingClass().getJavaInterfaceName(interPrefix, interSufix);
var targetType = er.getEReferenceType().getJavaInterfaceName(interPrefix, interSufix);
var targetTypeImpl = er.getEReferenceType().getJavaClassName(classPrefix, classSufix);
var unique = "true";
if (not er.isUnique()) { unique = "false";}
var opposite;
var opp_many = false;
if (er.getEOpposite().isDefined()) {
    opposite = er.getEOpposite().name;
    opp_many = er.getEOpposite().isMany();
}
var pack = er.getEReferenceType().getEPackage().name;
var erqp = qp.replace("." + er.getEContainingClass().getEPackage().name + ".", "." + pack + ".");
%]
[%=getHeader()%]
package [%=qp%].trace.impl;

import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal;
import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource;
import org.apache.tinkerpop.gremlin.structure.*;
import org.eclipse.epsilon.base.incremental.trace.util.ActiveTraversal;
import org.eclipse.epsilon.base.incremental.trace.util.GremlinUtils;
import org.eclipse.epsilon.base.incremental.trace.util.TraceFactory;
import org.eclipse.epsilon.base.incremental.trace.util.TinkerpopDelegate;
import org.eclipse.epsilon.base.incremental.exceptions.TraceModelConflictRelation;
import [%=qp%].trace.[%=sourceType%];
import [%=erqp%].trace.[%=targetType%];
import [%=qp%].trace.[%=er.getRelationJavaInterfaceName(interPrefix, interSufix)%];
import org.eclipse.epsilon.base.incremental.trace.impl.Feature;
[%if (er.isMany()) {%]
import java.util.Iterator;
import java.util.Map.Entry;

import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal;
[%}%]


/**
 * Implementation of [%=er.getRelationJavaInterfaceName(interPrefix, interSufix)%] reference. 
 */
@SuppressWarnings("unused") 
public class [%=er.getRelationJavaClassName(classPrefix, classSufix)%] extends Feature
        implements [%=er.getRelationJavaInterfaceName(interPrefix, interSufix)%], TinkerpopDelegate<Edge> {
    
    /** The graph traversal source for all navigations */
    private GraphTraversalSource gts;
    
    /** The source(s) of the reference */
    protected [%=sourceType%] source;
    
    /** Factory used to wrap referenced elements */
    protected final TraceFactory factory;
    
[%if (not er.isMany()) {%]
    /** Fast access for single-valued references */
    private Edge delegate;
[%}%]
    
    /**
     * Instantiates a new [%=er.getRelationJavaInterfaceName(interPrefix, interSufix)%].
     *
     * @param source                the source element of the reference
     * @param delegate              the delegate edge
     * @param gts                   the graph taversal source   
     * @param factory               the factory used to instantiante the target
     */
    public [%=er.getRelationJavaClassName(classPrefix, classSufix)%] (
        [%=sourceType%] source,
[%if (not er.isMany()) {%]
        Edge delegate,
[%}%]
        GraphTraversalSource gts, 
        TraceFactory factory) {
        super([%=unique%]);
        this.source = source;
        this.gts = gts;
        this.factory = factory;
[%if (not er.isMany()) {%]
        this.delegate = delegate;
[%}%]
    }
    
[%if (not er.isMany()) {%]
   /**
     * Instantiates a new [%=er.getRelationJavaInterfaceName(interPrefix, interSufix)%].
     *
     * @param source                the source element of the reference
     * @param gts                   the graph taversal source   
     * @param factory               the factory used to instantiante the target
     */
    public [%=er.getRelationJavaClassName(classPrefix, classSufix)%] (
        [%=sourceType%] source,
        GraphTraversalSource gts, 
        TraceFactory factory) {
        super([%=unique%]);
        this.source = source;
        this.gts = gts;
        this.factory = factory;
    }
[%}%]
    
    
    // PUBLIC API
        
    @Override
[%if (er.isMany()) {%]
    public Iterator<[%=targetType%]> get() {
        return new GremlinUtils.IncrementalFactoryIterator<[%=targetType%]>(getRaw(),
                gts, factory);
    }
    
    /**
     * Get the Tinkerpop GraphTraversal iterator of the vertices that are part of the relation.
     */
    public GraphTraversal<Vertex, Vertex> getRaw() {
        GraphTraversal<Vertex, Vertex> result = null;
        try (ActiveTraversal agts = new ActiveTraversal(gts)) {
            result = agts.V(source.getId()).out("[%=er.name%]");
        } catch (Exception e) {
            throw new IllegalStateException("There was an error during graph traversal.", e);
        }
        return result;
    }
[%} else {%]
    public [%=targetType%] get() {
        if (delegate == null) {
            try (ActiveTraversal agts = new ActiveTraversal(gts)) {
                GraphTraversal<Vertex, Edge> et = agts.V(source.getId()).outE("[%=er.name%]");
                if (et.hasNext()) {
                    delegate = et.next();
                }
            } catch (Exception e) {
                throw new IllegalStateException("There was an error during graph traversal.", e);
            }
        }
        
        if (delegate == null) {
            return null;
        }
        Vertex to = null;
        try (ActiveTraversal agts = new ActiveTraversal(gts)) {
            to = agts.E(delegate).inV().next();
            
        } catch (Exception e) {
            throw new IllegalStateException("There was an error during graph traversal.", e);
        }
        return factory.createTraceElement(to, gts);
    }
[%}%]    

    @Override
    public boolean create([%=targetType%] target) throws TraceModelConflictRelation {
        if (conflict(target)) {
            if (related(target)) {
                return true;
            }
            throw new TraceModelConflictRelation("Relation to previous [%=targetType%] exists");
        }
[%if (opposite.isDefined()) {%]
        target.[%=opposite%]().set(source);
[%}%]
        set(target);
        return true;
    }

    @Override
    public boolean destroy([%=targetType%] target) {
        if (!related(target)) {
            return false;
        }
[%if (opposite.isDefined()) {%]
        target.[%=opposite%]().remove(source);
[%}%]
        remove(target);
        return true;
    }
    
    @Override
    public boolean conflict([%=targetType%] target) {
        boolean result = false;
        try (ActiveTraversal agts = new ActiveTraversal(gts)) {
[%if (er.isMany()) {%]
	        if (isUnique()) {
	            GraphTraversal<Vertex, Vertex> gt =  agts.V(source.getId()).out("[%=er.name%]");
                for (Entry<String, Object> id : target.getIdProperties().entrySet()) {
                    gt.has(id.getKey(), id.getValue());
                }
                result |= gt.hasNext();
[%  for (rf in er.getEReferenceType().getRequiredFeatures()) {%]
                if (target.[%=rf.name%]().get() != null) {
	                gt.as("s")
	                    .out("[%=rf.name%]").hasId(target.[%=rf.name%]().get().getId())
	                    .select("s");
	               result |= gt.hasNext();
	            }
	            else {
	               return false;
	            }
[%  }%]
            }
[%} else {%]
            result |= delegate == null ?
                    agts.V(source.getId()).out("[%=er.name%]").hasNext() :
                    agts.E(delegate).inV().hasId(target.getId()).hasNext();
[%}
if (opposite.isDefined()) {
    if (opp_many) {%]
            try (ActiveTraversal agts2 = new ActiveTraversal(gts)) {
                result |= delegate == null ? false : (target.[%=opposite%]().isUnique() &&
                        agts2.V(target.getId()).out("[%=opposite%]").hasId(source.getId()).hasNext());
            }
            catch (Exception ex) {
                result = false;
            }
[%  } else {%]
            result |= target.[%=opposite%]().get() != null;
[%  }
}%]
        } catch (Exception e) {
            throw new IllegalStateException("There was an error during graph traversal.", e);
        }
        return result;
    }
    
    @Override
    public boolean related([%=targetType%] target) {
    	if (target == null) {
			return false;
		}
[%if (not er.isMany()) {%]
        if (delegate == null) {
            return false;
        }
[%}%]
        boolean result = false;
[%if (opposite.isDefined() and opp_many) {%]
        boolean inTarget = false;
[%}%]
        try (ActiveTraversal agts = new ActiveTraversal(gts)) {
[%var sourceRel;
if (er.isMany()) {
    sourceRel = "agts.V(source.getId()).out(\"" + er.name + "\").hasId(target.getId()).hasNext()";
} else {
    sourceRel = "agts.E(delegate).inV().hasId(target.getId()).hasNext()";
}
// If there is an opposite, need to check that too. The check depends on the
// multiplicity of the opposite
var targetRel = ";";
if (opposite.isDefined()) {
    if (opp_many) {%]
            inTarget = agts.V(target.getId()).out("[%=opposite%]").hasId(source.getId()).hasNext();
        } catch (Exception e) {
            throw new IllegalStateException("There was an error during graph traversal.", e);
        }
        try (ActiveTraversal agts = new ActiveTraversal(gts)) {
[%      targetRel = " && inTarget;";%]
[%  } else {
        targetRel = " && source.equals(target." + opposite + "().get());";%]
[%  }
}%]
		  result = [%=sourceRel%][%=targetRel%]
		} catch (Exception e) {
            throw new IllegalStateException("There was an error during graph traversal.", e);
        }
        return result;
	}
	
	@Override
    public Edge delegate() {
[%if (not er.isMany()) {%]
        return delegate;
[%} else {%]
        return null;
[%}%]
    }
    
    @Override
    public GraphTraversalSource graphTraversalSource() {
        return gts;
    }
        
    // PRIVATE API
    
    @Override
    public void set([%=targetType%] target) {
        try (ActiveTraversal agts = new ActiveTraversal(gts)) {
[%if (er.isMany()) {%]
            agts.V(source.getId()).addE("[%=er.name%]")
                    .to(agts.V(target.getId())).iterate();
[%} else {%]
            delegate = agts.V(source.getId()).addE("[%=er.name%]")
                    .to(agts.V(target.getId())).next();
[%}%]
        } catch (Exception e) {
            throw new IllegalStateException("There was an error during graph traversal.", e);
        }
        
    }
    
    @Override
    public void remove([%=targetType%] target) {
        try (ActiveTraversal agts = new ActiveTraversal(gts)) {
[%if (er.isMany()) {%]
            agts.V(source.getId())
                    .outE("[%=er.name%]")
                    .as("e").inV()
                    .hasId(target.getId())
                    .select("e").drop().iterate();
[%} else {%]
            agts.E(delegate).drop();
            delegate = null;
[%}%]
        } catch (Exception e) {
            throw new IllegalStateException("There was an error during graph traversal.", e);
        }
    }
}