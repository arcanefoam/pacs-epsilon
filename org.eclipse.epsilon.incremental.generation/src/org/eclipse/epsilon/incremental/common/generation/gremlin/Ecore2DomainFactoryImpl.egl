[%
/*******************************************************************************
 * Copyright (c) 2017 The University of York.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Horacio Hoyos Rodriguez - initial API and implementation
 ******************************************************************************/
/**
 * A template to generate factory for an extending language that delegates to its super language's
 * factory for types it does not recognize. If no super language, then the factory will raise an
 * exception in those cases.
 */
import "../Ecore2JavaTemplates.egl";
%]
[%=getHeader()%]
package [%=qp%].util;

import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource;
import org.apache.tinkerpop.gremlin.structure.Vertex;
import org.eclipse.epsilon.base.incremental.util.BaseTraceFactory;
import org.eclipse.epsilon.base.incremental.trace.util.TraceFactory;
import org.eclipse.epsilon.[%=ep.getName()%].incremental.trace.impl.*;

/**
 * A Factory to wrap Vertices around concrete classes based on the Vertex label.
 * It is useful for instantiating domain elements back from Gremlin elements. This Factory delegates
 * to another factory for labels (types) it does not support, if such facotry exists.
 * 
 * @author Horacio Hoyos Rodriguez
 *
 */
public class [%=ep.getName().firstToUpperCase()%]TraceFactory implements TraceFactory {

[%if(baseLanguage.length() > 0) {%]
    private final TraceFactory delegate;
    
    public [%=ep.getName().firstToUpperCase()%]TraceFactory () {
        delegate = new BaseTraceFactory();
    }
[%} else {%]
    public [%=ep.getName().firstToUpperCase()%]TraceFactory () { }
[%}%]
    
    @Override
    public <E> E createTraceElement(Vertex dlgt, GraphTraversalSource gts) {
        return createTraceElement(dlgt, gts, this);
    
    }
    
    @SuppressWarnings("unchecked")
    @Override
    public <E> E createTraceElement(Vertex dlgt, GraphTraversalSource gts, TraceFactory subFactory) {
        String label = dlgt.label();
        switch (label) {
[%
for (ec in ep.getEClassifiers().select(ec |
        ec.isTypeOf(EClass)
        and not ec.isInterface()
        and not ec.isAbstract())) {%]
        case "[%=ec.name%]":
            return (E) new [%=ec.name%]Gremlin(dlgt, gts, subFactory);
[%}
/* If there is a Class that inherits from a class in another package, and non of the classes
in this package have a local reference to that super class, we need a particular entry
Problem is, we also need to do this in the base class when you want to create a new
instance to represent an element in the DB... this might be hard
*/
%]
        [%=out.startPreserve("/*", "*/", ep.getName().firstToUpperCase()+"TraceFactory", true)%]
        // Add special factory overrides 
        [%=out.stopPreserve()%]
[%if(baseLanguage.length() > 0) {%]
        default:
            return delegate.createTraceElement(dlgt, gts, subFactory);
        }
[%} else {%]
        }
        throw new IllegalArgumentException(
                String.format("Trace Class %s not present in factory. If you changed the metamodel"
                        + "make sure the Ecore2DomainFactoryImpl egl is executed to regenerate this "
                        + "factory.", label));
[%}%]
    }
}
