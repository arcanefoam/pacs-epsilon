/*******************************************************************************
 * Copyright (c) 2017 The University of York.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Horacio Hoyos Rodriguez - initial API and implementation
 ******************************************************************************/
 
import 'EcoreHelper.eol';

/**
 * Create Java artifacts related to the ExL Trace Ecore metamodel. The launch configuration (or
 * java invocation) must provide the name of the package of interest, i.e. the package that
 * contains the classes for the ExL language, as a "targetLanguage" variable/parameter.
 * Additionally we need to know if the language extends another, so the model implementation
 * can reuse the extended language model implementation.
 *
 *  The craeted artifacts are:
 *  - An ITraceModel implementaiton that exploits the metamodel information (Ecore2TraceModel.egl)
 *  - A defintion of a java interface and a DTO implementation for each EClass of the metamodel's
 *    package
 *  - A definition of a java interface and a DTO implementation for each EReference of the
 *    metamodel's package, used to handle EReference semantics
 *  - An implementaiton of each EClass that delegates to TinkerPop Gremlin calls to resolve
 *      references (TODO). 
 */
pre {
    var now  = Native("java.time.LocalDate").now();
    var project = "../../../../../../../../org.eclipse.epsilon." + targetLanguage + ".engine.incremental";
    var folder = "/src-gen/org/eclipse/epsilon/" + targetLanguage + "/incremental";
    var qp = "org.eclipse.epsilon." + targetLanguage + ".incremental";
    var bl = "";
    if (baseLanguage.length() > 0) {
        bl = baseLanguage;
    }
    var primitives = Map {
        "boolean" = "Boolean", 
        "byte" = "Byte",
        "char" = "Character",
        "double" = "Double",
        "float" = "Float",
        "int" = "Integer",
        "long" = "Long",
        "short" = "Short",
        "void" = "Void"};
}

rule EClass2Interface
  transform ec : EClass {
  
    parameters {
      var params : new Map;
      params.put("today", now.toString());
      params.put("year", now.getYear().toString()); 
      params.put("qp", qp);
      params.put("interPrefix", interPrefix);
      params.put("interSufix", interSufix);
      params.put("classPrefix", classPrefix);
      params.put("classSufix", classSufix);
      return params;
    }
    guard    : ec.getEPackage().name == targetLanguage
    template : "EClass2Interface.egl"
    target   : project + folder + "/trace/" + interPrefix + ec.name + interSufix + ".java"
  }

rule EClass2Class
  transform ec : EClass {
  
    parameters {
      var params : new Map;
      params.put("today", now.toString());
      params.put("year", now.getYear().toString()); 
      params.put("qp", qp);
      params.put("interPrefix", interPrefix);
      params.put("interSufix", interSufix);
      params.put("classPrefix", classPrefix);
      params.put("classSufix", classSufix);
      params.put("primitives", primitives);
      return params;
    }
    guard    : not ec.isInterface() and not ec.isAbstract and (ec.getEPackage().name == targetLanguage)
    template : "EClass2Impl.egl"
    target   : project + folder + "/trace/impl/" + classPrefix+ ec.name + classSufix + ".java"
  }

rule EReference2Interface
  transform er : EReference {
  
    parameters {
      var featureType = er.getEContainingClass().name + "Has" + er.name.firstToUpperCase();
      var params : new Map;
      params.put("today", now.toString());
      params.put("year", now.getYear().toString()); 
      params.put("qp", qp);
      params.put("interPrefix", interPrefix);
      params.put("interSufix", interSufix);
      params.put("classPrefix", classPrefix);
      params.put("classSufix", classSufix);
      return params;
    }
    guard    : er.getEContainingClass().getEPackage().name == targetLanguage
    template : "EReference2Interface.egl"
    target   : project + folder + "/trace/" + interPrefix + featureType + interSufix + ".java"
  }

rule ERefernce2Class
  transform er : EReference {
  
    parameters {
      var featureType = er.getEContainingClass().name + "Has" + er.name.firstToUpperCase();
      var params : new Map;
      params.put("today", now.toString());
      params.put("year", now.getYear().toString()); 
      params.put("qp", qp);
      params.put("interPrefix", interPrefix);
      params.put("interSufix", interSufix);
      params.put("classPrefix", classPrefix);
      params.put("classSufix", classSufix);
      return params;
    }
    guard    : er.getEContainingClass().getEPackage().name == targetLanguage
    template : "EReference2Impl.egl"
    target   : project + folder + "/trace/impl/" + classPrefix + featureType + classSufix + ".java"
  }


rule EClass2Repository
  transform ec : EClass {
  
    parameters {
      var params : new Map;
      params.put("today", now.toString());
      params.put("year", now.getYear().toString()); 
      params.put("qp", qp);
      params.put("interPrefix", interPrefix);
      params.put("interSufix", interSufix);
      params.put("classPrefix", classPrefix);
      params.put("classSufix", classSufix);
      return params;
    }
    guard    : (ec.getEPackage().name == targetLanguage) and
                not EReference.all().exists(ref | ref.isContainment() and
                (ec.getEAllSuperTypes().including(ec).includes(ref.getEReferenceType())))
                
    template : "EClass2RepoInterface.egl"
    target   : project + folder + "/trace/" + interPrefix + ec.name + interSufix + "Repository.java"
  }

rule EClass2RepositoryImpl
  transform ec : EClass {
  
    parameters {
      var params : new Map;
      params.put("today", now.toString());
      params.put("year", now.getYear().toString()); 
      params.put("qp", qp);
      params.put("interPrefix", interPrefix);
      params.put("interSufix", interSufix);
      params.put("classPrefix", classPrefix);
      params.put("classSufix", classSufix);
      params.put("primitives", primitives);
      return params;
    }
    guard    : (ec.getEPackage().name == targetLanguage) and
                not ec.isInterface and
                not EReference.all().exists(ref | ref.isContainment() and
                (ec.getEAllSuperTypes().including(ec).includes(ref.getEReferenceType())))
    template : "EClass2RepoImpl.egl"
    target   : project + folder + "/trace/impl/" + classPrefix+ ec.name + classSufix + "RepositoryImpl.java"
  }

rule EClass2JUnit
  transform ec : EClass {
  
    parameters {
      var params : new Map;
      params.put("today", now.toString());
      params.put("year", now.getYear().toString()); 
      params.put("qp", qp);
      params.put("interPrefix", interPrefix);
      params.put("interSufix", interSufix);
      params.put("classPrefix", classPrefix);
      params.put("classSufix", classSufix);
      params.put("primitives", primitives);
      return params;
    }
    guard    : not ec.isInterface() and not ec.isAbstract and (ec.getEPackage().name == targetLanguage)
    template : "test/EClass2Junit.egl"
    target   : project + ".test" + folder + "/trace/" + classPrefix + ec.name + "Test.java"
  }


rule EPackage2Tests
  transform ep : EPackage {
  
  parameters {
    var params : new Map;
    params.put("today", now.toString());
    params.put("year", now.getYear().toString()); 
    params.put("qp", qp);
    params.put("baseLanguage", bl);
    params.put("interPrefix", interPrefix);
    params.put("interSufix", interSufix);
    params.put("classPrefix", classPrefix);
    params.put("classSufix", classSufix);
    return params;
  }
  
  guard: ep.name == targetLanguage
  template : "test/EPackageToModelTests.egl"
  target : project + ".test" + folder + "/trace/" + ep.name.firstToUpperCase() + "Tests.java"
  
}

post {
 "GenDone".println();
}