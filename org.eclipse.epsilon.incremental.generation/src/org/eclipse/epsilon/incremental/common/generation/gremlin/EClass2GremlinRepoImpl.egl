[%
/*******************************************************************************
 * Copyright (c) 2017 The University of York.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Horacio Hoyos Rodriguez - initial API and implementation
 ******************************************************************************/
import "../Ecore2JavaTemplates.egl";
%]
[%=getHeader()%]
package [%=qp%].trace.impl;

import java.util.ArrayList;
import java.util.List;

import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal;
import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource;
import org.apache.tinkerpop.gremlin.structure.T;
import org.apache.tinkerpop.gremlin.structure.Vertex;
import org.apache.tinkerpop.gremlin.structure.util.Attachable;
import org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertex;
import [%=qp%].trace.[%=ec.getJavaInterfaceName(interPrefix, interSufix)%];
import [%=qp%].trace.[%=ec.getJavaInterfaceName(interPrefix, interSufix)%]Repository;
import org.eclipse.epsilon.base.incremental.trace.util.ActiveTraversal;
import org.eclipse.epsilon.base.incremental.trace.util.TraceFactory;
[%
var superClass = ec.getESuperTypes().first();
var extends = null;
var name = ec.getJavaClassName(classPrefix, classSufix) + "RepositoryImpl";
var implements;
var extendGeneric = ec.getJavaInterfaceName(interPrefix, interSufix);
if (ec.getEAllSubclasses().isEmpty() and not ec.isAbstract) {
    implements = ec.getJavaInterfaceName(interPrefix, interSufix) + "Repository";
}
else {
    implements = ec.getJavaInterfaceName(interPrefix, interSufix) + "Repository<" + ec.getJavaInterfaceName(interPrefix, interSufix) + ">";
    name = name + "<ST extends " + ec.getJavaInterfaceName(interPrefix, interSufix) + ">";
    implements = ec.getJavaInterfaceName(interPrefix, interSufix) + "Repository<ST>";
    extendGeneric = "ST";
}
if (not superClass.isInterface) {
    extends = superClass.getJavaClassName(classPrefix, classSufix) + "RepositoryImpl<" + ec.getJavaInterfaceName(interPrefix, interSufix) + ">";    
    var erqp = superClass.getCorrectPackage(qp+".trace", ec);
    extendGeneric = ec.getJavaInterfaceName(interPrefix, interSufix);
    %]
import [%=erqp%].impl.[%=superClass.getJavaClassName(classPrefix, classSufix)%]RepositoryImpl;
[%
}
%]
[%=out.startPreserve("/**", "**/", ec.name + "RepositoryImplImports", true)%]

[%=out.stopPreserve()%]

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.inject.Inject;

/**
 * A repository for handling elements in the domain of [%=ec.name%].
 *
 * @author Horacio Hoyos Rodriguez
 */
@SuppressWarnings("unused")
public [%if(ec.isAbstract){%]abstract [%}%]class [%=name%][%if(extends.isDefined()){%] extends [%=extends%][%}%] implements [%=implements%] {

    private static final Logger logger = LoggerFactory.getLogger([%=ec.getJavaClassName(classPrefix, classSufix)%]RepositoryImpl.class);
 
[%if(not extends.isDefined()){%]
    protected GraphTraversalSource gts; 
    protected final TraceFactory factory;
[%}%]
    
    @Inject
    public [%=ec.getJavaClassName(classPrefix, classSufix)%]RepositoryImpl(
        GraphTraversalSource trvrslSrc,
        TraceFactory fctry) {
[%if(extends.isDefined()){%]
        super(trvrslSrc, fctry);
[%} else {%]
        gts = trvrslSrc;
        factory = fctry;
[%}%]        
    }

[%if (not ec.isAbstract){%]
    @Override
    public [%=extendGeneric%] add([%=extendGeneric%] item) {
        logger.info("Adding {} to repository", item);
        assert item instanceof [%=ec.getJavaClassName(classPrefix, classSufix)%];
        [%=ec.getJavaClassName(classPrefix, classSufix)%] impl = ([%=ec.getJavaClassName(classPrefix, classSufix)%])item;
        Vertex attached = ((DetachedVertex)impl.delegate()).attach(Attachable.Method.getOrCreate(gts.getGraph()));
        return factory.createTraceElement(attached, gts);
    }

    @Override
    public [%=extendGeneric%] remove([%=extendGeneric%] item) {
        logger.info("Removing {} from repository", item);
        Vertex v = (([%=ec.getJavaClassName(classPrefix, classSufix)%])item).delegate();
        v.remove();
        return factory.createTraceElement(null, gts);
    }
    
    @Override
    public void dispose() {    
[%  if(extends.isDefined()){%]
        super.dispose();
[%  } else {%]
[%  }%]
    } 
  
    @Override
    public [%=ec.getJavaInterfaceName(interPrefix, interSufix)%] get(Object id) {
        logger.debug("Get [%=ec.name%] with id:{}", id);
        [%=ec.getJavaClassName(classPrefix, classSufix)%] result = null;
        try (ActiveTraversal agts = new ActiveTraversal(gts)) {
            GraphTraversal<Vertex, Vertex> gt = agts.V(id);
	        if (gt.hasNext()) {
    	        result = factory.createTraceElement(gt.next(), gts);
	        }
        } catch (Exception e) {
            throw new IllegalStateException("There was an error during graph traversal.", e);
        }
        return result;
    }
[%}%] 
    
    [%=out.startPreserve("/**", "**/", ec.getJavaClassName(interPrefix, interSufix) + "Repositry", true)%]
    // Specialised search methods

    [%=out.stopPreserve()%]

}