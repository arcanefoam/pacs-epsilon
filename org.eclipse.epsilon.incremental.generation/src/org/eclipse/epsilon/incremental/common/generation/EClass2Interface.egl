[%
/*******************************************************************************
 * Copyright (c) 2017 The University of York.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Horacio Hoyos Rodriguez - initial API and implementation
 ******************************************************************************/
import "Ecore2JavaTemplates.egl";  

/**
 * Generation of Java Interface from an EClass that does not use any EMF types.
 */
%]
[%=getHeader()%]
package [%=qp%].trace;

import java.util.Map;

[%if (ec.getEAllReferences().exists(er | er.isContainment())){%]
import org.eclipse.epsilon.base.incremental.exceptions.EolIncrementalExecutionException;
[%}
for (imp in ec.getRequiredImports(qp+".trace", interPrefix, interSufix, classPrefix, classSufix)) {%]
import [%=imp%];    
[%}%]

/**
[%
var docs = ec.getDocumentation(0);
if (docs.isDefined()) {%]
 [%=docs%]
[%} else {%]
 * The [%=ec.name%] Interface.
[%}%]
 */
@SuppressWarnings("unused")
public interface [%=ec.getFullInterfaceName(interPrefix, interSufix)%] {
[%
for (ea in ec.getEAttributes()) {
    var multi = "List";
    if (ea.isUnique()) {
        multi = "Set";
    }%]
    
    [%=ea.makeGetterDoc()%]
    [%=ea.makeGetterSignature(multi)%];
[%  if (not ea.isMany() and (not ec.getIndexAttributes().includes(ea))) {%]

    [%=ea.makeSetterDoc()%]
    [%=ea.makeSetterSignature(multi)%];
[%  }%]
[%}%]

[%
//ea.makeGetterDoc()
for (er in ec.getEReferences()) {%]
    [%=er.makeGetterDoc()%]
    [%=er.getRelationJavaInterfaceName(interPrefix, interSufix)%] [%=er.name%]();
                
[%
}%]
[%
for (op in ec.getEOperations()) {
    var retType;
    if (op.getEType().name.startsWith("EMap")) {
        var mapTypes = op.getMapTypes();
        retType = "Map<" + mapTypes.at(0) + "," + mapTypes.at(1) + ">";
    } else {
        // FIXME Might need to import type
        retType = op.getEType().isDefined(); 
    }
    var args = new Sequence();
    for (p in op.getEParameters()) {
        var type = a.getEType().getInstanceClassName();
        var name = a.getName();
        args.add(type + " " + name);
    }
%]
    [%=retType%] [%=op.name%]([%=args.concat(", ")%]);  
[%}
%]

[%if (not (ec.isAbstract() or ec.isInterface())) {%] 
    /**
     * [%=ec.name%] has same identity in the aggregate.
     */
    boolean sameIdentityAs(final [%=ec.getJavaInterfaceName(interPrefix, interSufix)%] other);
    
[%}%]
[%/* Factory Methods
 * If the EReferenceType is abstract, we add factory methods for each of the subclasses of the
 * EReferenceType. We only add subclasses that are not contained elsewhere. We only look
 for classes in the EClass Package
 */
for (er in ec.getEAllReferences().select(er | er.isContainment())) {
    if (not er.getEReferenceType().isAbstract()) {%]
    [%=er.getEReferenceType().factorySignature(interPrefix, interSufix)%]
[%  } else {
        var subClasses = er.getEReferenceType().getEAllSubclasses()
                .select(sc | not sc.isAbstract() and
                    not EReference.all().exists(aller |
                    (aller.getEReferenceType() == sc) and 
                    aller.isContainment)
                );
        if (not er.getAnnotations("https://eclipse.org/epsilon/incremental/factory").isEmpty()) {
            var erType = er.getEReferenceType();%]
            
    /** The [%=erType.name%] Factory. */        
    public <A extends [%=erType.getJavaInterfaceName(interPrefix, interSufix)%]> A getOrCreate[%=erType.name%](Class<A> [%=erType.name.firstToLowerCase()%]Class, Object... args) throws EolIncrementalExecutionException;
          
[%      }
        else {
            for (sc in subClasses) {%]
    [%=sc.factorySignature(interPrefix, interSufix)%]

[%          }
        }%]
[%  }%]
[%}%]

}
[%
@template
operation EClass factorySignature(interPrefix:String, interSufix:String) {
    var params = self.getEAttributeParameters().includingAll(self.getRequiredFeatureParameters(interPrefix, interSufix));%]
/** The [%=self.name%] Factory. */
[%=self.getJavaInterfaceName(interPrefix, interSufix)%] getOrCreate[%=self.name%]([%=params.concat(", ")%]) throws EolIncrementalExecutionException;       
[%}
%]