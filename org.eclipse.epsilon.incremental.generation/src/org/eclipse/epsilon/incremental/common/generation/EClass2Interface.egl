[%
/*******************************************************************************
 * Copyright (c) 2017 The University of York.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Horacio Hoyos Rodriguez - initial API and implementation
 ******************************************************************************/
import "Ecore2JavaTemplates.egl";  

/**
 * Generation of Java Interface from an EClass that does not use any EMF types.
 */
%]
[%=getHeader()%]
package [%=qp%].trace;

[%if (ec.getEAllReferences().exists(er | er.isContainment())){%]
//import org.eclipse.epsilon.base.incremental.EolIncrementalExecutionException;
[%}
for (imp in ec.getRequriedImports(qp+".trace", interPrefix, interSufix, classPrefix, classSufix)) {%]
import [%=imp%];    
[%}%]

/**
 * The [%=ec.name%] defines the access methods for the EClass features.
 * Additionally, the [%=ec.getJavaInterfaceName(interPrefix, interSufix)%] acts as the root entity of the AGGREGATE of its
 * container references. That is, elements contained in the [%=ec.name%] must be
 * created through this interface.
 */
public interface [%=ec.getFullInterfaceName(interPrefix, interSufix)%] {

[%
for (ea in ec.getEAttributes()) {
    var multi = "List";
    if (ea.isUnique()) {
        multi = "Set";
    }%]
    [%=ea.makeGetterDoc()%]
    [%=ea.makeGetterSignature(multi)%];[%
    if (not ea.isMany() and (not ec.getIndexAttributes().includes(ea))) {%]    

    [%=ea.makeSetterDoc()%]
    [%=ea.makeSetterSignature(multi)%];
[%      }%]
            
[%}%]

[%
for (er in ec.getEReferences()) {%]
    /** The [%=er.name%] reference. */
    [%=er.getRelationJavaInterfaceName(interPrefix, interSufix)%] [%=er.name%]();
                
[%
}%]
[%if (not (ec.isAbstract() or ec.isInterface())) {%] 
    /**
     * [%=ec.name%] has same identity in the aggregate.
     */
    public boolean sameIdentityAs(final [%=ec.getJavaInterfaceName(interPrefix, interSufix)%] other);
    
[%}%]
[%/* Factory Methods
 * If the EReferenceType is abstract, we add factory methods for each of the subclasses of the
 * EReferenceType. We only look for classes in the EClass Package
 */
for (er in ec.getEAllReferences().select(er | er.isContainment())) {
    if (not er.getEReferenceType().isAbstract()) {%]
    [%=er.getEReferenceType().factorySignature(interPrefix, interSufix)%]
[%  } else {
        var subClasses = er.getEReferenceType().getEAllSubclasses()
            .select(sc | (sc.getEPackage() == ec.getEPackage()) and not sc.isAbstract());
        for (sc in subClasses) {%]
    [%=sc.factorySignature(interPrefix, interSufix)%]
            
[%      }%]
[%  }%]
   
[%
}%]
}
[%
@template
operation EClass factorySignature(interPrefix:String, interSufix:String) {
    var params = self.getEAttributeParameters().includingAll(self.getRequiredFeatureParameters(interPrefix, interSufix));%]
/** The [%=self.name%] Factory. */
[%=self.getJavaInterfaceName(interPrefix, interSufix)%] create[%=self.name%]([%=params.concat(", ")%]) throws EolIncrementalExecutionException;       
[%}
%]