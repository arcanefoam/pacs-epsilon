[%
/*******************************************************************************
 * Copyright (c) 2017 The University of York.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Horacio Hoyos Rodriguez - initial API and implementation
 ******************************************************************************/
import "EcoreHelper.eol";

// A set of reusable templetes for java code generation from an Ecore metamodel

/**
 * Get the required parameters for initialization of objects of this EClass. The required parameters
 * are the attributes that are indices, an instance of the container (if conatined),  ant ant 
 * required references (mult = [1..1]). The containment must be reachable via opposite.
 */
@template
operation EClass getConstructorParameters(signature : Boolean, interPrefix:String, interSufix:String) {
    // Index attributes
    var results : Sequence = new Sequence();
    results.addAll(self.getEAttributeParameters());
    // Requried references
    results.addAll(self.getRequiredFeatureParameters(interPrefix, interSufix));
    // Container
    var container = self.getContainerReference().at(0);
    var containerType = self.getContainerReference().at(1);
    if (container.isDefined() and not self.getRequiredFeatures().includes(container)) {
        results.add(containerType.getJavaInterfaceName(interPrefix, interSufix) + " container");
    }
    else if (containerType.isDefined()) {
        results.add(containerType.getJavaInterfaceName(interPrefix, interSufix) + " container");
    }
	if (signature) {
%][%=results.concat(",\n")%]
[%  } else {
%][%=results.concat(",\n")%]
[%  }
}

// Get the java interface name of an EClass, correctly extending interfaces defined for the EClass
// super types.
@template
operation EClass getFullInterfaceName(interPrefix, interSufix) {
    if (self.getESuperTypes().isEmpty()) {%]
[%=self.getJavaInterfaceName(interPrefix, interSufix)%][%
    } else {%]
[%=self.getJavaInterfaceName(interPrefix, interSufix)%] extends [%=self.getESuperTypes().collect(ec | ec.getJavaInterfaceName(interPrefix, interSufix)).concat(", ")%][%
    }
}

@template
operation EAttribute makeGetterDoc() {
    var docs = self.getDocumentation(0);%]
/**
 * Returns the value of the '{@link [%=self.getEContainingClass.getName()%]#[%=self.getName()%] <em>[%=self.getName()%]</em>}' attribute.
[%  if (docs.isDefined()) {%]
 [%=docs%]
[% } else {%]
 [%=out.startPreserve("* <!--", "-->", self.getName()+"-getter-doc", true)%]
 * <p>
 * If the meaning of the '<em>[%=self.getName().splitCamelCase()%]</em>' attribute isn't clear,
 * add it to the metamodel as a GenDoc or edit it here.
 * </p>
 [%=out.stopPreserve()%] 
[%  }%]
 * @return the value of the '<em>[%=self.getName().splitCamelCase()%]</em>' attribute.
 */[%}

@template
operation EAttribute makeSetterDoc() {
    var docs = self.getDocumentation(0);%]
/**
 * Sets the value of the '{@link [%=self.getEContainingClass.getName()%]#[%=self.getName()%] <em>[%=self.getName()%]</em>}' attribute.
[%  if (docs.isDefined()) {%]
 [%=docs%]
[% } else {%]
 [%=out.startPreserve("* <!--", "-->", self.getName()+"-setter-doc", true)%]
 * <p>
 * If the meaning of the '<em>[%=self.getName().splitCamelCase()%]</em>' attribute isn't clear,
 * add it to the metamodel as a GenDoc or edit it here.
 * </p>
 [%=out.stopPreserve()%] 
[%  }%]
 * @param value the new value of the '<em>[%=self.getName().splitCamelCase()%]</em>' attribute.
 */[%}

@template
operation EReference makeGetterDoc() {
    var docs = self.getDocumentation(0);%]
/**
 * Returns the value of the '<em><b>[%=self.getName().splitCamelCase()%]</b></em>' reference.
[%  if (docs.isDefined()) {%]
 [%=docs%]
[% } else {%]
 [%=out.startPreserve("* <!--", "-->", self.getName()+"-getter-doc", true)%]
 * <p>
 * If the meaning of the '<em>[%=self.getName().splitCamelCase()%]</em>' attribute isn't clear,
 * add it to the metamodel as a GenDoc or edit it here.
 * </p>
 [%=out.stopPreserve()%] 
[%  }%]
 * @return the value of the '<em>[%=self.getName().splitCamelCase()%]</em>' reference.
 */[%}

// Templates to generate getter and setter methods.

// Signatures include the return type, the method name and the parameters (if any)). For multivalued
// attributes the multiType parameter is used to define the generic type of the collections. The
// caller should pass the preferred type based on the ordered and unique attributes of the attribute
@template
operation EAttribute makeGetterSignature(multiType : String) {%]
[%=self.getGetterReturnType(multiType)%] [%=self.getGetterMethodName()%]()
[%}

@template
operation EAttribute makeSetterSignature(multiType : String) {%]
[%=self.getSetterReturnType()%] [%=self.getSetterMethodName()%]([%=self.getSetterParamterType(multiType)%] [%=self.getSetterParamterName()%])
[%}

// For EReferences, the typePRefix and typeSufix allow the signature to match the prefix and
// sufix used to declare the Java types of the referenced EClasses.
@template
operation EReference makeGetterSignature(multiType:String, typePrefix:String, typeSufix:String) {%]
[%=self.getGetterReturnType(multiType, typePrefix, typeSufix)%] [%=self.getGetterMethodName()%]()
[%}

@template
operation EReference makeSetterSignature(typePrefix, typeSufix) {%]
[%=self.getSetterReturnType()%] [%=self.getSetterMethodName()%]([%=self.getSetterParamterType(typePrefix, typeSufix)%] [%=self.getSetterParamterName()%])
[%}


@template
operation EStructuralFeature getGetterMethodName() {%]
get[%=self.getName().firstToUpperCase()%]
[%}

@template
operation EStructuralFeature getSetterMethodName() {%]
set[%=self.getName().firstToUpperCase()%]
[%}

@template
operation EAttribute getGetterReturnType(multiType : String) {
    var name = getJavaPrimitive(self.getEAttributeType().getInstanceClassName());
    if (self.isMany()) {%]
[%=multiType%]<[%=name%]>
[%  } else {%][%=name%][% }
}

@template
operation EAttribute getSetterReturnType() {%]
void
[%}

@template
operation EAttribute getSetterParamterType(multiType : String) {if (self.isMany()) {%]
[%=multiType%]<[%=self.getEAttributeType().getInstanceClassName()%]>    
[%  } else {%][%=self.getEAttributeType().getInstanceClassName()%][% }
}

@template
operation EAttribute getSetterParamterName() {%]
value
[%}

@template
operation EReference getGetterReturnType(multiType:String, typePrefix:String, typeSufix:String) {if (self.isMany()) {%]
[%=multiType%]<[%=self.getEReferenceType().getJavaClassName(typePrefix, typeSufix)%]>
[%  } else {%][%=self.getEReferenceType().getJavaClassName(typePrefix, typeSufix)%][% }
}

@template
operation EReference getSetterReturnType() {%]
void
[%}

@template
operation EReference getSetterParamterType(typePrefix, typeSufix) {%]
[%=self.getEReferenceType().getJavaClassName(typePrefix, typeSufix)%]
[%}

@template
operation EReference getSetterParamterName() {%]
value
[%}

@template
operation getHeader() {%]
 /*******************************************************************************
 * This file was automatically generated on: [%=today%].
 * Only modify protected regions indicated by "/** **&#47;"
 *
 * Copyright (c) 2017 The University of York.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 ******************************************************************************/
[%}
%]