[%
/*******************************************************************************
 * Copyright (c) 2017 The University of York.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Horacio Hoyos Rodriguez - initial API and implementation
 ******************************************************************************/
/**
 * A template to generate an implementation of an EClass that can be used as a DTO.
 */
import "../Ecore2JavaTemplates.egl";
%]
[%=getHeader()%]
package [%=qp%].trace.impl;

import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import java.util.NoSuchElementException;

import org.apache.tinkerpop.gremlin.process.traversal.P;
import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal;
import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource;
import org.apache.tinkerpop.gremlin.structure.*;
import [%=qp%].trace.[%=ec.getJavaInterfaceName(interPrefix, interSufix)%];
import org.eclipse.epsilon.base.incremental.trace.util.GremlinUtils;
import org.eclipse.epsilon.base.incremental.trace.util.GremlinWrapper;
[%=out.startPreserve("/**", "**/", ec.name + "Imports", true)%]

[%=out.stopPreserve()%]
[%if (ec.getEAllReferences().exists(er | er.isContainment())){%]
import org.eclipse.epsilon.base.incremental.exceptions.EolIncrementalExecutionException;
[%}%]
import org.eclipse.epsilon.base.incremental.exceptions.TraceModelConflictRelation;
import org.eclipse.epsilon.base.incremental.exceptions.TraceModelDuplicateElement;
import org.eclipse.epsilon.base.incremental.trace.util.IncrementalUtils;
[%
for (imp in ec.getRequiredImports(qp+".trace", interPrefix, interSufix, classPrefix, classSufix, true, true)) {%]
import [%=imp%];
[%}%]

/**
 * Implementation of [%=ec.getJavaInterfaceName(interPrefix, interSufix)%]. 
 */
public class [%=ec.getJavaClassName(classPrefix, classSufix)%] implements [%=ec.getJavaInterfaceName(interPrefix, interSufix)%], GremlinWrapper<Vertex> {
    

    /** The graph traversal source for all navigations */
    private GraphTraversalSource gts;
    
    /** The delegate Vertex */
    private Vertex delegate;
    
[%  // Craete a field for each reference
for (er in ec.getEAllReferences()) {%]
    /**
[%  var docs = er.getDocumentation(0);
    if (docs.isDefined()) {%]
     * [%=docs%]
    [%} else {%]
     * The [%=er.name%].
    [%}%]
     */
    private [%=er.getRelationJavaInterfaceName(interPrefix, interSufix)%] [%=er.name%];

[%}
%]
    /**
     * Empty constructor for deserialization.
     */    
    public [%=ec.getJavaClassName(classPrefix, classSufix)%]() {
    }
    
    /**
     * Instantiates a new [%=ec.getJavaClassName(classPrefix, classSufix)%]. The [%=ec.getJavaClassName(classPrefix, classSufix)%] is uniquely identified by its
     * container and any attributes identified as indexes.
     */    
    public [%=ec.getJavaClassName(classPrefix, classSufix)%](
        [%=ec.getConstructorParameters(true, interPrefix, interSufix)%]) throws TraceModelDuplicateElement, TraceModelConflictRelation {
        this.delegate = vertex;
        this.gts = gts;
[%if (not ec.getIndexAttributes().isEmpty()) {%]
        GraphTraversalSource g = startTraversal();
        try {
            g.V(delegate)
[%  for (index in ec.getIndexAttributes()) {%]
            .property("[%=index.name%]", [%=index.name%])
[%  }%]
            .iterate();
        }
        finally {
            finishTraversal(g);
        }
[%}
var container = ec.getContainerReference().at(0);
var type = ec.getContainerReference().at(1);
var opposite = ec.getContainerReference().at(2);
if (container.isDefined()) {
    if (ec.getRequiredFeatures().includes(container)) {%]
        if (!this.[%=container.name%].[%=opposite.name%]().create(this)) {
[%  } else {%]
        if (!container.[%=opposite.name%]().create(this)) {
[%  }%]
            throw new TraceModelDuplicateElement();
        };
[%
} else if (opposite.isDefined()) {%]
        if (!container.[%=opposite.name%]().create(this)) {
            throw new TraceModelDuplicateElement();
        };
[%}%]
[%
for (er in ec.getEqualsReferences()) {%]
        this.[%=er.name%] = new [%=er.getRelationJavaClassName(classPrefix, classSufix)%](this, gts);
[%}
var derivedFeatures = ec.getEAllReferences().select(er | not er.isDerived());
for (er in derivedFeatures.excludingAll(ec.getEqualsReferences())) {%]
        this.[%=er.name%] = new [%=er.getRelationJavaClassName(classPrefix, classSufix)%](this, gts);
[%}
var createRefs = ec.getEqualsReferences().includingAll(derivedFeatures.excludingAll(ec.getEqualsReferences()))
    .select(er | (er <> ec.getContainerReference().at(0)) and er.isRequired() and not er.isMany());
if (not createRefs.isEmpty()) {%]
        try {
[% for (er in createRefs) {%]
	        this.[%=er.name%].create([%=er.name%]);
[%}%]
        } catch (TraceModelConflictRelation ex) {
[% for (er in createRefs) {%]
            (([%=er.getRelationJavaClassName(classPrefix, classSufix)%])this.[%=er.name%]).delegate().remove();
[%}%]
            throw ex;
        }
[%}%]
    }
    
[%for (ea in ec.getEAllAttributes().select(ea | not ea.derived)) {
    var multi = "List";
    if (ea.isUnique()) {
        multi = "Set";
    }%]
    @Override
    public [%=ea.makeGetterSignature(multi)%] {
[%  if (ea.isID()){%]
        return ([%=ea.getGetterReturnType(multi)%]) delegate == null ? null : delegate.id();
[%  } else {%]
        GraphTraversalSource g = startTraversal();
        [%=ea.getGetterReturnType(multi)%] result = null;
        try {
	        try {
	            result = ([%=ea.getGetterReturnType(multi)%]) g.V(delegate).values("[%=ea.name%]").next();
	        } catch (NoSuchElementException ex) {
	            [%=out.startPreserve("/**", "**/", ea.name, true)%]
	            // TODO Add default return value for [%=ec.getJavaClassName(classPrefix, classSufix)%].[%=ea.getGetterMethodName()%]
	            throw new IllegalStateException("Add default return value for [%=ec.getJavaClassName(classPrefix, classSufix)%].[%=ea.getGetterMethodName()%]", ex);
	            [%=out.stopPreserve()%]
	        }
	    } finally {
            finishTraversal(g);
        }    
        return result;
[%  }%]
    }
    
[%  if (not ea.isMany() and not ec.getIndexAttributes().includes(ea)) {%]    
    @Override
    public [%=ea.makeSetterSignature(multi)%] {
[%  if (ea.isID()){%]
        throw new UnsupportedOperationException("Id is final");
[%  } else {%]
        GraphTraversalSource g = startTraversal();
        try {
            g.V(delegate).property("[%=ea.name%]", value).iterate();
        } finally {
            finishTraversal(g);
        }
[%  }%]  
    }   
     
[%  }
}%]
[%for (ea in ec.getEAllAttributes().select(ea | ea.derived)) {
    var multi = "List";
    if (ea.isUnique()) {
        multi = "Set";
    }%]
    @Override
    public [%=ea.makeGetterSignature(multi)%] {
        [%=out.startPreserve("/**", "**/", ea.name, true)%]
        return null;
        [%=out.stopPreserve()%]
    }
    
[%  if (not ea.isMany() and not ec.getIndexAttributes().includes(ea)) {%]    
    @Override
    public [%=ea.makeSetterSignature(multi)%] {
        [%=out.startPreserve("/**", "**/", ea.name, true)%]
        return null;
        [%=out.stopPreserve()%]
    }   
     
[%  }
}%]
[%for (er in ec.getEAllReferences()) {%]
    @Override
    public [%=er.getRelationJavaInterfaceName(interPrefix, interSufix)%] [%=er.name%]() {
        if ([%=er.name%] == null) {
            [%=er.name%] = new [%=er.getRelationJavaClassName(classPrefix, classSufix)%](this, this.gts);
            GraphTraversalSource g = startTraversal();
            try {
                GraphTraversal<Vertex, Edge> gt = g.V(delegate).outE("[%=er.name%]");
                if (gt.hasNext()) {
                    (([%=er.getRelationJavaClassName(classPrefix, classSufix)%])[%=er.name%]).delegate(gt.next());
                }
            } finally {
                finishTraversal(g);
            }
        }
        return [%=er.name%];
    }

[%}%]
[%/* Factory Methods
 * If the EReferenceType is abstract, we add factory methods for each of the subclasses
 * of the EReferenceType. We only add subclasses that are not contained elsewhere or 
 * contained in this EClass supertypes (i.e. we need to implement all factories from
 * inhereted interfaces).
 */
for (er in ec.getEAllReferences().select(er | er.isContainment())) {
    if (not er.getEReferenceType().isAbstract()) {%]
    [%=er.getEReferenceType().factoryMethod(er, false, interPrefix, interSufix, classPrefix, classSufix)%]
[%  } else {
        var subClasses = er.getEReferenceType().getEAllSubclasses()
                .select(sc | not sc.isAbstract() and
                    not EReference.all().exists(aller |
                    (aller.getEReferenceType() == sc) and 
                    aller.isContainment)
                );
        for (sc in subClasses) {%]
    [%=sc.factoryMethod(er, true, interPrefix, interSufix, classPrefix, classSufix)%]

[%      }%]
[%  }%]

[%}%]
[%
for (op in ec.getEAllOperations()) {
    op.getEType().name.println("op name ");
    var retType;
    if (op.getEType().name.startsWith("EMap")) {
        var mapTypes = op.getMapTypes().println("types");
        retType = "Map<" + mapTypes.at(0) + "," + mapTypes.at(1) + ">";
    } else {
        // FIXME Might need to import type
        retType = op.getEType(); 
    }
    var args = new Sequence();
    for (p in op.getEParameters()) {
        var type = a.getEType().getInstanceClassName();
        var name = a.getName();
        args.add(type + " " + name);
    }
%]
    public [%=retType%] [%=op.name%]([%=args.concat(", ")%]) {
[%  if (op.name == "getIdProperties") {%]
        Map<String, Object> result = new HashMap<>();
[%      for (index in ec.getIndexAttributes()) {%]
        result.put("[%=index.name%]", get[%=index.name.firstToUpperCase()%]());
[%      }%]
        return result;
[%}    else {%]
        [%=out.startPreserve("/**", "**/", op.name, true)%]
        return null;
        [%=out.stopPreserve()%]
[%  }%]
    }
[%}%]

    @Override
    public boolean sameIdentityAs(final [%=ec.getJavaInterfaceName(interPrefix, interSufix)%] other) {
        if (other == null) {
            return false;
        }
[%
for (index in ec.getIndexAttributes()) {
    var typeName = primitives.get(index.getEAttributeType().getJavaClassName());
    if (typeName.isDefined()) {%]
        [%=typeName%] [%=index.name%] = [%=typeName%].valueOf(get[%=index.name.firstToUpperCase()%]());
        [%=typeName%] other[%=index.name.firstToUpperCase()%] = [%=typeName%].valueOf(other.get[%=index.name.firstToUpperCase()%]());
[%  }
    else {
        typeName = index.getEAttributeType().getJavaClassName();%]
        [%=typeName%] [%=index.name%] = get[%=index.name.firstToUpperCase()%]();
        [%=typeName%] other[%=index.name.firstToUpperCase()%] = other.get[%=index.name.firstToUpperCase()%]();
[%  }%]
        if ([%=index.name%] == null) {
            if (other[%=index.name.firstToUpperCase()%] != null)
                return false;
        } else if (![%=index.name%].equals(other[%=index.name.firstToUpperCase()%])) {
            return false;
        }
[%}%]
        return true;
    }

    @Override
    public boolean equals(final Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (!(obj instanceof [%=ec.getJavaClassName(classPrefix, classSufix)%]))
            return false;
        [%=ec.getJavaClassName(classPrefix, classSufix)%] other = ([%=ec.getJavaClassName(classPrefix, classSufix)%]) obj;
        if (!sameIdentityAs(other))
            return false;
[%
// Use only the EReferneces defined in the metamodel
for (er in ec.getEqualsReferences()) {
    var access = er.name;%]
    if ([%=access%] == null) {
        if (other.[%=access%] != null)
            return false;
    }
[%
    access += "().get()";
    if (er.isMany()) {
        if (er.isOrdered) {%]
        if (!IncrementalUtils.equalOrderedIterators([%=access%], other.[%=access%])) {
            return false;
        }
[%      } else if (er.isUnique()) {%]
        if (!IncrementalUtils.equalUniqueIterators([%=access%], other.[%=access%])) {
            return false;
        }
[%      } else {%]
        if (!IncrementalUtils.equalIterators([%=access%], other.[%=access%])) {
            return false;
        }
[%      } 
    } else {%]
        if (![%=access%].equals(other.[%=access%])) {
            return false;
        }
[%  }
}%]
        return true; 
  }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
[%for (index in ec.getIndexAttributes()) {
    var typeName = primitives.get(index.getEAttributeType().getJavaClassName());
    if (typeName.isDefined()) {%]
        [%=typeName%] [%=index.name%] = [%=typeName%].valueOf(get[%=index.name.firstToUpperCase()%]());
        result = prime * result + (([%=index.name%] == null) ? 0 : [%=index.name%].hashCode());
[%  } else {%]
        result = prime * result + ((get[%=index.name.firstToUpperCase()%]() == null) ? 0 : get[%=index.name.firstToUpperCase()%]().hashCode());
[%  }
}%]
[%for (er in ec.getEqualsReferences()) {
    var access = er.name;
    if(er.isTypeOf(EReference)){
        access += "().get()";
    }
    if (er.isTypeOf(EAttribute) and (er.getEAttributeType().name == "EBoolean")) {%]
        result = prime * result + ([%=access%] ? 1 : 0);
[%  } else { %]
        result = prime * result + (([%=access%] == null) ? 0 : [%=access%].hashCode());
[%  }
}%]
        return result;
    }
    
    @Override
    public Vertex delegate() {
        return delegate;
    }

    @Override
    public void delegate(Vertex delegate) {
        this.delegate = delegate;
    }
    
    @Override
    public void graphTraversalSource(GraphTraversalSource gts) {
        this.gts = gts;
    }
    
    private GraphTraversalSource startTraversal() {
        return this.gts.clone();
    }
    
    private void finishTraversal(GraphTraversalSource g) {
        try {
            g.close();
        } catch (Exception e) {
            // Fail silently?
        }
    }
}
[%
@template
operation EClass factoryMethod(ref : EReference, subClass : Boolean, interPrefix:String,
                               interSufix:String, classPrefix:String, classSufix:String) {
    var instanceName = self.name.firstToLowerCase();
    var params = self.getEAttributeParameters().includingAll(self.getRequiredFeatureParameters(interPrefix, interSufix));
    var vars = self.getIndexAttributes().includingAll(self.getRequiredFeatures()).collect(a | a.name);
    var container = self.getContainerReference().at(2);
    var containment = self.getContainerReference().at(0);
    if (container.isDefined()) {
        vars.add("this");
    }
    vars.add("v");
    vars.add("gts");
    var retType = self.getJavaInterfaceName(interPrefix, interSufix);%]
@Override
public [%=retType%] getOrCreate[%=self.name%]([%=params.concat(", ")%]) throws EolIncrementalExecutionException {
    GraphTraversalSource g = startTraversal();
    [%=self.getJavaClassName(classPrefix, classSufix)%] [%=instanceName%] = null;
    try {
[%  var traversal = "g.V(delegate).out(\"" + ref.name + "\")";
    if (ref.isMany()) {    
        if (ref.isUnique()) {
	        for (param in self.getIndexAttributes()) {
		        traversal += ".has(\"" + param.name + "\", "+ param.name+ ")";
		        if (hasMore) {
		          traversal += "\n";
		        }
		    }
        }
        else {
            traversal = "";
        }
    }
    if (traversal.length() == 0) {%]
        Vertex v = null;
        try {
            v = g.addV("[%=self.name%]").next();
            [%=instanceName%] = new [%=self.getJavaClassName(classPrefix, classSufix)%]([%=vars.concat(", ")%]);
        } catch (TraceModelDuplicateElement | TraceModelConflictRelation e) {
            g.V(v).as("v").properties().drop().select("v").drop();
            throw new EolIncrementalExecutionException("Error creating requested [%=self.name%]", e);
        }
[%  } else {%]
	    GraphTraversal<Vertex, Vertex> gt = [%=traversal%];
	    if (gt.hasNext()) {
	        [%=instanceName%] = new [%=self.getJavaClassName(classPrefix, classSufix)%]();
	        [%=instanceName%].delegate(gt.next());
	        [%=instanceName%].graphTraversalSource(gts);
	    }
	    else {
	        Vertex v = null;
	        try {
	            v = g.addV("[%=self.name%]").next();
	            [%=instanceName%] = new [%=self.getJavaClassName(classPrefix, classSufix)%]([%=vars.concat(", ")%]);
	        } catch (TraceModelDuplicateElement | TraceModelConflictRelation e) {
	            g.V(v).as("v").properties().drop().select("v").drop();
	            throw new EolIncrementalExecutionException("Error creating requested [%=self.name%]", e);
	        }
	    }
[%  }%]
	} finally {
        finishTraversal(g);
    }    
    return [%=instanceName%];
}      
[%}
/**
 * Get the required parameters for initialization of objects of this EClass. The required parameters
 * are the attributes that are indices, an instance of the container (if conatined),  ant ant 
 * required references (mult = [1..1]). The containment must be reachable via opposite.
 */
@template
operation EClass getConstructorParameters(signature : Boolean, interPrefix:String, interSufix:String) {
    // Index attributes
    var results : Sequence = new Sequence();
    results.addAll(self.getEAttributeParameters());
    // Requried references
    results.addAll(self.getRequiredFeatureParameters(interPrefix, interSufix));
    // Container
    var container = self.getContainerReference().at(0);
    var containerType = self.getContainerReference().at(1);
    if (container.isDefined() and not self.getRequiredFeatures().includes(container)) {
        results.add(containerType.getJavaInterfaceName(interPrefix, interSufix) + " container");
    }
    else if (containerType.isDefined()) {
        results.add(containerType.getJavaInterfaceName(interPrefix, interSufix) + " container");
    }
    results.add("Vertex vertex");
    results.add("GraphTraversalSource gts");
    if (signature) {
%][%=results.concat(", ")%]
[%  } else {
%][%=results.concat(",\n")%]
[%  }
}

%]