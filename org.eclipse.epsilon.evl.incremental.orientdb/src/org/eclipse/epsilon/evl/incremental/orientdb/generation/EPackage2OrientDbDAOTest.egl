[%
import "../../../../../../../../../org.eclipse.epsilon.incremental.common/src/org/eclipse/epsilon/incremental/common/generation/Ecore2JavaTemplates.egl";
/**
 *  Trace Model Implementation Tests
 *  @author Horacio Hoyos Rodriguez
 */
%]
 /*******************************************************************************
 * This file was automatically generated on: [%=today%].
 * Only modify protected regions indicated by "<!-- -->"
 *
 * Copyright (c) 2016 University of York
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
package [%=qp%].test.execute;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;
import static org.hamcrest.Matchers.notNullValue;

import org.eclipse.epsilon.eol.incremental.EolIncrementalExecutionException;
import org.eclipse.epsilon.evl.incremental.orientdb.execute.EvlOrientDbDAO;
import org.eclipse.epsilon.evl.incremental.orientdb.trace.impl.*;
import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import com.tinkerpop.blueprints.impls.orient.OrientEdgeType;
import com.tinkerpop.blueprints.impls.orient.OrientGraph;
import com.tinkerpop.blueprints.impls.orient.OrientGraphFactory;
import com.tinkerpop.blueprints.impls.orient.OrientVertexType;
/**
 * Test the implementaion of the OrientDb DAO. 
 */
public class [%=p.getName().firstToUpperCase()%]DAOTests {

    private OrientGraphFactory factory;
    
    @Rule
    public ExpectedException exception = ExpectedException.none();
    
    
    @Before
    /**
     * Create some data in the graph
     * - One vertex of each type so we can check its properties.
     * - One each of each type so we can check navigation
     */ 
    public void setupDb() {
        factory = new OrientGraphFactory("memory:evlTest");
        EvlOrientDbDAO.setupSchema(factory);
    }
    
    @After
    public void setupDB() {
        factory.drop();
        factory.close();
    }

    @Test
    public void testSchemaIsComplete() {
        OrientGraph graph = factory.getTx();
        OrientVertexType vt;
[%
// Test that all vertex types where created in the DB
for (ec in EClass.all.select(ec | not ec.isAbstract() and not ec.isInterface())) {%]
        vt = graph.getVertexType("[%=ec.name%]");
        assertThat(vt, is(notNullValue()));
[%}%]

        OrientEdgeType et;
[%
// Test that all edge types where created in the DB
for (e in ecore!EClass.all
            .collect(c | c.getEReferences())
            .flatten()
            .select(r | r.isEdge())
            .collect(r | r.name.firstToUpperCase())) {%]
        et = graph.getEdgeType("[%=e%]");
        assertThat(et, is(notNullValue()));
[%}%]
        graph.shutdown();
    }

[%
// For each EClass test the CRUD methods
// FIXME Probably for the traces we want something different... or more tests
for (ec in EClass.all.select(ec | not ec.isAbstract() and not ec.isInterface())) {
    var index = ec.getIndexAttribute();
    var properties : Sequence;
    // Create property values
    for (ea in ec.getEAllAttributes().select(a | not a.isId())) {
            properties.add(ea.name + ".value");       
    }%]
    @Test
    public void test[%=ec.name%]() throws Exception {
        
        EvlOrientDbDAO dao = new EvlOrientDbDAO(factory);
        // Create
[%  if (properties.isEmpty()) {%]
        [%=ec.name%]OrientDbImpl v1 = dao.create[%=ec.name%]();
        [%=ec.name%]OrientDbImpl v2 = dao.create[%=ec.name%]();
        assertThat(dao.get[%=ec.name%]ById(v1.getId()), is(notNullValue()));
        assertThat(dao.get[%=ec.name%]ById(v2.getId()), is(notNullValue()));
[%  } else {%]
        [%=ec.name%]OrientDbImpl v1 = dao.create[%=ec.name%]([%=properties.collect(v | "\"" + v + "1\"").concat(", ")%]);
        [%=ec.name%]OrientDbImpl v2 = dao.create[%=ec.name%]([%=properties.collect(v | "\"" + v + "2\"").concat(", ")%]);
[%      for (ea in ec.getEAllAttributes().select(a | not a.isId())) {%]
        assertThat(dao.get[%=ec.name%]ById(v1.getId()).[%=ea.getGetterMethodName()%](), is("[%=properties.at(loopCount-1)+"1"%]"));
        assertThat(dao.get[%=ec.name%]ById(v2.getId()).[%=ea.getGetterMethodName()%](), is("[%=properties.at(loopCount-1)+"2"%]"));
[%      }%]
        // Update
[%      for (ea in ec.getEAllAttributes().select(a | not a.isId())) {
            var newVal = properties.at(loopCount-1)+"10";%]
        v1.[%=ea.getSetterMethodName()%]("[%=newVal%]");
        v1 = dao.update[%=ec.name%](v1);
        assertThat(dao.get[%=ec.name%]ById(v1.getId()).[%=ea.getGetterMethodName()%](), is("[%=newVal%]"));[%
            newVal = properties.at(loopCount-1)+"20";%]        
        v2.[%=ea.getSetterMethodName()%]("[%=newVal%]");
        v2 = dao.update[%=ec.name%](v2);
        assertThat(dao.get[%=ec.name%]ById(v2.getId()).[%=ea.getGetterMethodName()%](), is("[%=newVal%]"));
[%      }
        var indexValue = index.name + ".value";%]        
        // Find by index
        assertThat(dao.get[%=ec.name%]ByIndex("[%=indexValue+"10"%]").getId(), is(v1.getId()));
        assertThat(dao.get[%=ec.name%]ByIndex("[%=indexValue+"20"%]").getId(), is(v2.getId()));
[%  }%]
        // Delete
        dao.delete[%=ec.name%](v1);
        exception.expect(EolIncrementalExecutionException.class);
        exception.expectMessage("No [%=ec.name%] found with id");
        dao.get[%=ec.name%]ById(v1.getId());
        dao.delete[%=ec.name%](v2);
        exception.expect(EolIncrementalExecutionException.class);
        exception.expectMessage("No [%=ec.name%] found with id");
        dao.get[%=ec.name%]ById(v2.getId());
        
[%  if (index.isDefined()) {%]
        // Create duplicate
        v1 = dao.create[%=ec.name%]( [%=properties.collect(v | "\"" + v + "1\"").concat(", ")%]);
        v2 = dao.create[%=ec.name%]( [%=properties.collect(v | "\"" + v + "1\"").concat(", ")%]);
        assertThat(v2.getId(), is(v1.getId()));
        
        //Unknown index
        exception.expect(EolIncrementalExecutionException.class);
        exception.expectMessage("No [%=ec.name%] found with index (uri): someindex");
        v1 = dao.get[%=ec.name%]ByIndex("someindex");
[%  }%]        
        // Unknown id
        exception.expect(EolIncrementalExecutionException.class);
        exception.expectMessage("No [%=ec.name%]  found with id: someid");
        v1 = dao.get[%=ec.name%]ById("someid");
    }  

[%}
// Testedges
%]


}