[%
import "../../../../../../../../../org.eclipse.epsilon.incremental.common/src/org/eclipse/epsilon/incremental/common/generation/Ecore2JavaTemplates.egl";
%]
 /*******************************************************************************
 * This file was automatically generated on: [%=today%].
 * Only modify protected regions indicated by "<!-- -->"
 *
 * Copyright (c) 2016 University of York
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Jonathan Co - Initial API and implementation
 *     Horacio Hoyos - API extension
 *******************************************************************************/
package [%=qp%].trace.impl;

import java.util.Iterator;
[%
for (imp in ec.getRequriedImports("org.eclipse.epsilon.incremental.trace", "", "", true, true)){%]
import [%=imp%];
[%}
if (ec.getEpackage().name.startsWith("Evl")) {%]
import org.eclipse.epsilon.evl.incremental.trace.tinkerpop.Abstract[%=ec.name%]Impl;
[%} else {%]
import org.eclipse.epsilon.[%=ec.getEpackage().name%].incremental.trace.tinkerpop.Abstract[%=ec.name%]Impl;
[%}%]
import com.tinkerpop.blueprints.impls.orient.OrientVertex;
import com.tinkerpop.gremlin.java.GremlinPipeline;

/**
 * An implementation of the [%=ec.name%] that delegates to an OrientDB vertex.
 */
public class [%=ec.name%]OrientDbImpl extends Abstract[%=ec.name%]Impl<OrientVertex> {
    
    /** The class name for Vertices of this type in the DB schema */
    public static final String VERTEX_TYPE = "[%=ec.name%]";
[%
var index = ec.getIndexAttribute();
if (index.isDefined()){%]
    
    /** The attribute to use as index for vertices of this type */
    public static final String VERTEX_INDEX = "[%=index.name%]";
    
[%}
for (er in ec.getEAllAttributes().select(a | not a.isId())) {%]
    /** The attribute name in the DB */
    public static final String [%=er.name.toUpperCase()%] = "[%=er.name%]";
    
[%}
for (er in ec.getEAllReferences()) {
    var multi = "List";
    if (er.isMany() and not er.isOrdered()) {
        multi = "Set";
    }%]
    /** Placeholder for referenced values */
    private [%=er.getGetterReturnType(multi, "", "")%] [%=er.name%];
    
[%}%]    
	/**
     * Instantiates a new [%=ec.name%] OrientDb Impl.
     *
     * @param delegate the delegate
     */
    public [%=ec.name%]OrientDbImpl(OrientVertex  delegate) {
        super(delegate);
        if (!(delegate.getLabel() == "[%=ec.name%]")) {
            throw new IllegalArgumentException(
                    String.format("Delegate vertex is not of the correct type. Got: %s, expected: %s",
                        delegate.getLabel(), "[%=ec.name%]"));
        }
[%for (er in ec.getEAllReferences()) {%]
        init[%=er.name.firstToUpperCase()%]();
[%}%]
        delegate.detach();      // After information has been cached, detach.
    }

    @Override
    public Object getId() {
        return delegate.getId();
    }
    
    @Override
    public void setId(Object value) {
        // TODO Implement [%=ec.name%]OrientDbImpl.setId
        throw new UnsupportedOperationException("Readonly field    [%=ec.name%]OrientDbImpl.setId invoked.");
    }
    
[%for (ea in ec.getEAllAttributes().select(ea | ea.name <> "id")) {
    var multi = "List";
    if (ea.isMany() and not ea.isOrdered()) {
        multi = "Set";
    }%]

    @Override
    public [%=ea.makeGetterSignature(multi)%] {
        return ([%=ea.getGetterReturnType(multi)%]) delegate.getProperty("[%=ea.name%]");
    }
    
    @Override
    public [%=ea.makeSetterSignature(multi)%] {
        delegate.setProperty("[%=ea.name%]", value);
    }    
[%}
for (er in ec.getEAllReferences()) {
    var retType = er.getEReferenceType().getJavaTypeName("", "");
    var multi = "List";
    if (er.isMany() and not er.isOrdered()) {
        multi = "Set";
    }%]
    @Override
    public [%=er.makeGetterSignature(multi, "", "")%] {
        return [%=er.name%];
    }
[%  if (not er.isMany()) {%]
    @Override
    public [%=er.makeSetterSignature("", "")%] {
        throw new UnsupportedOperationException("Readonly field    [%=er.name%]OrientDbImpl.[%=er.getSetterMethodName()%] invoked.");
    }
[%}%]    
    private void init[%=er.name.firstToUpperCase()%]() {
        GremlinPipeline<OrientVertex, OrientVertex> pipeline = new GremlinPipeline<>();
[%  if (not er.isMany()) {%]
        [%er.makeInitMethodSingle();%]
[%  } else {%]
        [%er.makeInitMethodMany();%]
[%  }%]    
    }
[%}
%]      
}
[%
operation EReference makeInitMethodSingle() {
    var retType = self.getEReferenceType().getJavaTypeName("", "");%]
        OrientVertex vertex = [%=self.getGetterMethodName()%](pipeline);
        if (vertex != null) {
[%  if (self.getEReferenceType().isAbstract()) {%]
            switch(vertex.getLabel()) {
[%      for(sec in self.getEReferenceType().getEAllSubclasses()){%]
	        case("[%=sec.name%]"):
	            [%=self.name%] = new [%=sec.name%]OrientDbImpl(vertex);
	            break;
[%      }%]      
	        default:
	            throw new IllegalArgumentException("Unknown [%=self.getEReferenceType().name%] subclass " + vertex.getLabel());
	        }
	    }
[%  }
    else {%]
        [%=retType%] vImpl = new [%=retType%]OrientDbImpl(vertex);
[%  }%]
[%}

operation EReference makeInitMethodMany() {
    var retType = self.getEReferenceType().getJavaTypeName("", "");
    var multi = "List";
    var impl = "ArrayList";
    if (not self.isOrdered()) {
        multi = "Set";
        impl = "HashSet";
    }%]
        [%=self.name%] = new [%=impl%]<>();
        Iterator<OrientVertex> it = [%=self.getGetterMethodName()%](pipeline);
        while (it.hasNext()) {
[%  if (self.getEReferenceType().isAbstract()) {%]
            OrientVertex vertex = it.next();
            [%=retType%] vImpl = null;
            switch(vertex.getLabel()) {
[%      for(sec in self.getEReferenceType().getEAllSubclasses()){%]
            case("[%=sec.name%]"):
                vImpl = new [%=sec.name%]OrientDbImpl(vertex);
                break;
[%      }%]      
            default:
                throw new IllegalArgumentException("Unknown [%=self.getEReferenceType().name%] subclass " + vertex.getLabel());
            }
[%  }
    else {%]
            [%=retType%] vImpl = new [%=retType%]OrientDbImpl(it.next());
[%  }%]
            [%=self.name%].add(vImpl);
        }
[%}
%]
