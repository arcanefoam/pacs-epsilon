[%
import "../../../../../../../../../org.eclipse.epsilon.incremental.common/src/org/eclipse/epsilon/incremental/common/generation/Ecore2JavaTemplates.egl";
/**
 *  Trace Model Implementation Tests
 *  @author Horacio Hoyos Rodriguez
 */
%]
 /*******************************************************************************
 * This file was automatically generated on: [%=today%].
 * Only modify protected regions indicated by "<!-- -->"
 *
 * Copyright (c) 2016 University of York
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *******************************************************************************/
package [%=qp%].test.trace;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;

import java.util.Iterator;

import org.eclipse.epsilon.evl.incremental.orientdb.execute.EvlOrientDbDAO;
import org.eclipse.epsilon.evl.incremental.orientdb.trace.impl.*;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import com.tinkerpop.blueprints.Vertex;
import com.tinkerpop.blueprints.impls.orient.OrientGraph;
import com.tinkerpop.blueprints.impls.orient.OrientGraphFactory;
import com.tinkerpop.blueprints.impls.orient.OrientVertex;

/**
 * Test the implementaion of the TraceModel that uses OrientDb. 
 */
public class [%=p.getName().firstToUpperCase()%]TraceModelTests {

	private OrientGraphFactory factory;
    
    @Before
    public void setupDb() {
        factory = new OrientGraphFactory("memory:evlTest");
        EvlOrientDbDAO.setupSchema(factory);
        OrientGraph graph = factory.getTx();
[%
// One vertex per class
for (ec in EClass.all.select(ec | not ec.isAbstract() and not ec.isInterface())) {%]
        OrientVertex [%=ec.name.toLowerCase()%] = graph.addVertex("class:[%=ec.name%]");
[%  // For each property create a repetable value
    for (ea in ec.getEAllAttributes().select(a | not a.isId())) {%]
        [%=ec.name.toLowerCase()%].setProperty("[%=ea.name%]", "[%=ea.name%].[%=ec.name.toLowerCase()%]");        
[%  }
}
// For each type of Trace craete one pattern (i.e. the trace and its edges)
var tracePatterns : Map;
for (t in EClass.all.select(ec | ec.getESuperTypes.includes(EClass.all.selectOne(c | c.name == "Trace")))) {
    var edges : Map;
    for (er in t.getEAllReferences.select(r | r.isEdge())) {
        var target;
        if (er.getEReferenceType().isAbstract()) {      // Find a subtype
            target = er.getEReferenceType().getEAllSubclasses().random();
        }
        else {
            target = er.getEReferenceType();
        }
        edges.put(er.name, target);
    %]
        graph.addEdge("class:[%=er.name.firstToUpperCase()%]", [%=t.name.toLowerCase()%], [%=target.name.toLowerCase()%], null);
[%
    }
    tracePatterns.put(t, edges);
}
var blockPatterns : Map;
for (t in EClass.all.select(ec | ec.getESuperTypes.includes(EClass.all.selectOne(c | c.name == "ExecutableBlock")))) {
    var edges : Map;
    for (er in t.getEAllReferences.select(r | r.isEdge())) {
        var target;
        if (er.getEReferenceType().isAbstract()) {      // Find a subtype
            target = er.getEReferenceType().getEAllSubclasses().random();
        }
        else {
            target = er.getEReferenceType();
        }
        edges.put(er.name, target);
    %]
        graph.addEdge("class:[%=er.name.firstToUpperCase()%]", [%=t.name.toLowerCase()%], [%=target.name.toLowerCase()%], null);
[%
    }
    blockPatterns.put(t, edges);
}
%]
        graph.commit();
        graph.shutdown();
    }
        
    @After
    public void setupDB() {
        factory.drop();
        factory.close();
    }
    
[%
// For each class, test that a vertex exist and that its properties are correct
for (ec in EClass.all.select(ec | not ec.isAbstract() and not ec.isInterface())) {%]
    @Test
    public void test[%=ec.name%]() {
        OrientGraph graph = factory.getTx();
        Iterator<Vertex> it = graph.getVerticesOfClass("[%=ec.name%]").iterator();
        assertThat(it.hasNext(), is(true));
        OrientVertex v = (OrientVertex) it.next();
        [%=ec.name%]OrientDbImpl impl = new [%=ec.name%]OrientDbImpl(v);
        [%
    for (ea in ec.getEAllAttributes().select(a | not a.isId())) {%]
        assertThat(impl.get[%=ea.name.firstToUpperCase()%](), is("[%=ea.name%].[%=ec.name.toLowerCase()%]"));        
[%  }%]
        graph.shutdown();
    }
    
[%}    
// For each type of Trace test that the involved vertices have the correct references
for (t in tracePatterns.keySet()) {%]
    @Test
    public void test[%=t.name%]Pattern() {
        OrientGraph graph = factory.getTx();
        Iterator<Vertex> it = graph.getVerticesOfClass("[%=t.name%]").iterator();
        [%=t.name%]OrientDbImpl impl = new [%=t.name%]OrientDbImpl((OrientVertex) it.next());
        OrientVertex refV;
        Iterator<Vertex> refIt;
[%  var edges = tracePatterns.get(t);
    for (er  in edges.keySet()) {%]
        refIt = graph.getVerticesOfClass("[%=edges.get(er).name%]").iterator();
        refV = (OrientVertex) refIt.next();
        [%=edges.get(er).name%]OrientDbImpl [%=edges.get(er).name.toLowerCase()%] = ([%=edges.get(er).name%]OrientDbImpl) impl.get[%=er.firstToUpperCase()%]().get(0);
        assertThat(refV, is([%=edges.get(er).name.toLowerCase()%].getDelegate()));
[%  }%]
        graph.shutdown();
    }
    
[%
}
// For each type of ExecutableBlock test the owner attribute
for (t in blockPatterns.keySet()) {%]
    @Test
    public void test[%=t.name%]Pattern() {
        OrientGraph graph = factory.getTx();
        Iterator<Vertex> it = graph.getVerticesOfClass("[%=t.name%]").iterator();
        [%=t.name%]OrientDbImpl impl = new [%=t.name%]OrientDbImpl((OrientVertex) it.next());
        OrientVertex refV;
        Iterator<Vertex> refIt;
[%  var edges = blockPatterns.get(t);
    for (er  in edges.keySet()) {%]
        refIt = graph.getVerticesOfClass("[%=edges.get(er).name%]").iterator();
        refV = (OrientVertex) refIt.next();
        [%=edges.get(er).name%]OrientDbImpl [%=edges.get(er).name.toLowerCase()%] = ([%=edges.get(er).name%]OrientDbImpl) impl.get[%=er.firstToUpperCase()%]();
        assertThat(refV, is([%=edges.get(er).name.toLowerCase()%].getDelegate()));
[%  }%]
        graph.shutdown();
    }
    
[%
}%]        
}
