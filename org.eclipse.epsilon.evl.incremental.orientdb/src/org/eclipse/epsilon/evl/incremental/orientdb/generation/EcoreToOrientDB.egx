pre {
	var now  = new Native("java.util.Date");
	var path_prefix = "../../../../../../../../src-gen/org/eclipse/epsilon/evl/incremental/orientdb/";
	var qualified_package = "org.eclipse.epsilon.evl.incremental.orientdb";
}

rule Evl2DAO
  transform p : EPackage {
  
  parameters {
    var params : new Map;
    params.put("today", now.toString());
    params.put("qp", qualified_package);
    return params;
  }
  guard: p.name == "evl"  
  template : "EPackage2OrientDbDAO.egl"
  target : path_prefix + "execute/" + p.getName().firstToUpperCase() + "OrientDbDAO.java"
  
}

rule Evl2TraceModelTest
  transform p : EPackage {
  
  parameters {
    var params : new Map;
    params.put("today", now.toString());
    params.put("qp", qualified_package);
    return params;
  }
  guard: p.name == "evl"  
  template : "EPackage2OrientDbTraceTest.egl"
  target : "../../../../../../../../../org.eclipse.epsilon.evl.incremental.orientdb.test/src-gen/org/eclipse/epsilon/evl/incremental/orientdb/"
            + "test/trace/" + p.getName().firstToUpperCase() + "TraceModelTests.java"
  
}

rule EClass2OrientDbImpl
  transform ec : EClass {
  
  guard : not ec.isInterface() and not ec.isAbstract()

  parameters {
    // These parameters will be made available
    // to the invoked template as variables
    var params : new Map;
    params.put("today", now.toString());
    params.put("qp", qualified_package);
    // Allow flexibility for persistance classes to use the same base name as the model classes
    params.put("typePrefix", "");
    params.put("typeSufix", "");
    return params;
  }

  // The EGL template to be invoked
  template : "EClass2OrientImpl.egl"

  // Output file
  target : path_prefix + "trace/impl/" + ec.getName() + "OrientDbImpl.java"

}

post{
 "GenDone".println();
}