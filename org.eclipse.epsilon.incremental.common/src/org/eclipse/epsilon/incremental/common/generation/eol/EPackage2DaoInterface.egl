[%
/*******************************************************************************
 * Copyright (c) 2017 The University of York.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Horacio Hoyos Rodriguez - initial API and implementation
 ******************************************************************************/
import "../Ecore2JavaTemplates.egl";

/**
 * Use the EClasses properties to to extend the IModel interface to provide specialized model
 * access and instace management 
 */%]
 /*******************************************************************************
 * Copyright (c) 2016 University of York
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Horacio Hoyos - Initial API and implementation
 *******************************************************************************/

/*******************************************************************************
 ** [%=p.getName()%] model Interface automatically generated on [%=today%].
 ** Do not modify this file.
 *******************************************************************************/
package [%=qp%].models;

import org.eclipse.epsilon.incremental.trace.eol.*;
import org.eclipse.epsilon.eol.models.IModel;

/**
 * An IModelExtension that provides specialized methods for working with execution traces.
 * 
 * @author Horacio Hoyos
 *
 */
public interface I[%=p.getName().firstToUpperCase()%]ModelBase extends IModel {
[%
for (ec in p.getEClassifiers().select(ec | ec.isTypeOf(ecore!EClass) and not ec.isInterface())) {%]  
    /**
     * Add a new [%=ec.Name%].
     *
     * @return The ID of the created [%=ec.Name%]
     */
    Object insert[%=ec.Name%]([%=ec.getCreateParameters(true)%]);
    
    /**
     * Find the [%=ec.Name%] by Id.
     *
     * @param id The id to use for the search 
     * @return The [%=ec.Name%] for the id, null if not found.
     */
    [%=ec.Name%] find[%=ec.Name%]byId(Object id);
    
    /**
     * Delete the [%=ec.Name%].
     * 
     * @param [%=ec.Name.firstToLowerCase()%] the [%=ec.Name%] to delete
     * @return True on success, false on failure
     */
    boolean delete[%=ec.Name%]([%=ec.Name%] [%=ec.Name.firstToLowerCase()%]);
    
    /**
     * Update the [%=ec.Name%]. Note that this method should only update the element attributes.
     * Changes in references should be done using the provided link methods.
     *
     * @param [%=ec.Name.firstToLowerCase()%] the [%=ec.Name%] to update
     * @return True on success, false on failure
     */
    boolean update[%=ec.Name%]([%=ec.Name%] [%=ec.Name.firstToLowerCase()%]);
    
[%
/**
 * Create link methods to create/define a reference between elements.
 */
    for (ref in ec.getEAllReferences().select(sf | sf.isEdge())) {%]
    /**
     * Add a [%=ref.getName().firstToUpperCase()%] link between the [%=ec.getName()%] and the [%=ref.getEReferenceType().getName()%].
     *
     * @param source The source of the link
     * @param target The target of the link
     * @return True on success, false on failure
     */
    boolean add[%=ref.getName().firstToUpperCase()%]Link([%=ec.getName()%] source, [%=ref.getEReferenceType().getName()%] target);
    
[%  }
}
%]
}

 
 