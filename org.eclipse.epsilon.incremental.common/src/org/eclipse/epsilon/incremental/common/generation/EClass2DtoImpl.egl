[%
/*******************************************************************************
 * Copyright (c) 2017 The University of York.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Horacio Hoyos Rodriguez - initial API and implementation
 ******************************************************************************/
/**
 * A template to generate an implementation of an EClass that can be used as a DTO.
 */
import "Ecore2JavaTemplates.egl";
 %]
 /*******************************************************************************
 * This file was automatically generated on: [%=today%].
 * Only modify protected regions indicated by "<!-- -->"
 *
 * Copyright (c) 2017 The University of York.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 ******************************************************************************/
package [%=qp%].trace.impl;

import [%=qp%].trace.[%=ec.getName()%];
[%
for (imp in ec.getRequriedImports(qp+".trace", "", "", true, true)) {%]
import [%=imp%];    
[%}%]

/**
 * Implementation of [%=ec.getName()%]. 
 */
public class [%=ec.name%]Impl implements [%=ec.name%] {

[%for (ea in ec.getEAllAttributes()) {
    var multi = "List";
    if (ea.isOrdered()) { multi = "Set"; }%]
    /** The [%=ea.name%] */
    private [%=ea.getGetterReturnType(multi)%] [%=ea.name%];

[%}%]
[%for (er in ec.getEAllReferences()) {%]
    /** The [%=er.name%] relation */
    private final [%=er.getEContainingClass().name%]Has[%=er.name.firstToUpperCase()%] [%=er.name%];

[%}%]
    /**
     * Instantiates a new [%=ec.getName()%]. The [%=ec.getName()%] is uniquely identified by its
     * container and any attributes identified as indexes.
     */    
    public [%=ec.getName()%]Impl([%=ec.getConstructorParameters(true)%]) {
[%for (index in ec.getIndexAttributes()) {%]
        this.[%=index.name%] = [%=index.name%];
[%}%]
[%for (er in ec.getEAllReferences()) {%]
        this.[%=er.name%] = new [%=er.getEContainingClass().name %]Has[%=er.name.firstToUpperCase()%]Impl(this);
[%  if ((er <> ec.getContainerReference().at(0)) and er.isRequired() and not er.isMany()) {%]
        this.[%=er.name%].create([%=er.name%]);
[%  }%]
[%}%]
[%var container = ec.getContainerReference().at(2);
if (container.isDefined()) {%]
        container.[%=container.name%]().create(this);
[%} else if (ec.getContainerReference().at(0).isDefined()) {%]
        container.[%=ec.getContainerReference().at(0).name%]().create(this);
[%}%]
    }
    
[%for (ea in ec.getEAllAttributes()) {
    var multi = "List";
    if (ea.isOrdered()) {
        multi = "Set";
    }%]
    @Override
    public [%=ea.makeGetterSignature(multi)%] {
        return [%=ea.name%];
    }
    
[%  if (not ea.isMany()) {%]    
    @Override
    public [%=ea.makeSetterSignature(multi)%] {
        this.[%=ea.name%] = value;
    }   
     
[%  }
}%]
[%for (er in ec.getEAllReferences()) {%]
    @Override
    public [%=er.getEContainingClass().name%]Has[%=er.name.firstToUpperCase()%] [%=er.name%]() {
        return [%=er.name%];
    }

[%
}%]
[%/* Factory Methods
 * If the EReferenceType is abstract, we add factory methods for each of the subclasses of the
 * EReferenceType. We only look for all classes as we are implementing the methods.
 */
for (er in ec.getEAllReferences().select(er | er.isContainment())) {
    if (not er.getEReferenceType().isAbstract()) {%]
    [%=er.getEReferenceType().factoryMethod()%]
[%  } else {
        var subClasses = er.getEReferenceType().getEAllSubclasses();
        for (sc in subClasses) {%]
    [%=sc.factoryMethod()%]
            
[%      }%]
[%  }%]
                  
[%}%]

[%
// FIXME We need Equals and Hash!
/*
  @Override
  public boolean sameIdentityAs(final Cargo other) {
    return other != null && trackingId.sameValueAs(other.trackingId);
  }

  @Override
  public boolean equals(final Object object) {
    if (this == object) return true;
    if (object == null || getClass() != object.getClass()) return false;

    final Cargo other = (Cargo) object;
    return sameIdentityAs(other);
  }

  @Override
  public int hashCode() {
    return trackingId.hashCode();
  }
*/
%] 

}
[%
@template
operation EClass factoryMethod() {
    var params = self.getEAttributeParameters().includingAll(self.getRequiredFeatureParameters());
    var vars = self.getIndexAttributes().includingAll(self.getRequiredFeatures()).collect(a | a.name).including("this");%]
@Override
public [%=self.name%] create[%=self.name%]([%=params.concat(", ")%]) {
    return new [%=self.name%]Impl([%=vars.concat(", ")%]);
}      
[%}
%]