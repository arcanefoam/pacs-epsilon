[%
@template
operation EClass testClass() {
    var container; // = self.getEAllReferences().selectOne(er | er.isContainer());
    var containerClass;
    var containment = self.getContainerReference().at(2);
    var containment_many = false;
    var contReferenceClass;
    var contReferenceVar;
	if (containment.isDefined()) {     // Contaiener exists
	    container = self.getContainerReference().at(0);
	    containerClass = self.getContainerReference().at(1);
	    containment_many = containment.isMany();
	    contReferenceClass = containerClass.name + "Has" + containment.name.firstToUpperCase();
	    contReferenceVar = contReferenceClass.firstToLowerCase();
	}%]
    
    public static class [%=self.name%]Tests extends EasyMockSupport {
    
        @Rule
        public EasyMockRule rule = new EasyMockRule(this);

[%  // Mok the refernce targets and create variables for the references
    for (er in self.getEAllReferences()) {%]
        /** Mock the target of the [%=er.name%] reference. */
        @Mock
        private [%=er.getEReferenceType().name%] [%=er.getEReferenceType().name.firstToLowerCase()%]Mock1;
        
        /** Mock the target of the [%=er.name%] reference. */
        @Mock
        private [%=er.getEReferenceType().name%] [%=er.getEReferenceType().name.firstToLowerCase()%]Mock2;
        
        [%if (er.getEOpposite().isDefined()) {
            var opp = er.getEOpposite();
            var oppClass = opp.getEContainingClass().name + "Has" + opp.name.firstToUpperCase();
            var oppVar = oppClass.firstToLowerCase();%]
        /** Allow the target mock to populate the reference */
        private [%=oppClass%] [%=oppVar%]1;
        
        /** Allow the target mock to populate the reference */
        private [%=oppClass%] [%=oppVar%]2;
        
        [%}%]
[%}%]
[%  // If the containment is not a Reference, we need to add a mock for ut.
    if (containment.isDefined() and container.isUndefined()) {%]
        /** Mock the container. */
        @Mock
        private [%=containerClass.name%] containerMock;
        
        /** Allow the container mock to populate the reference */
        private [%=contReferenceClass%] [%=contReferenceVar%]1;

[%}%]
        private [%=self.name%] classUnderTest;
        
        @Test
        public void test[%=self.name%]Instantiation() throws Exception {
[%=self.initClassUnderTest(containerClass, containment, contReferenceClass, contReferenceVar, container)%]
[%  if (container.isDefined()) {%]
            assertThat(classUnderTest.[%=container.name%]().get(), is([%=container.getEReferenceType().name.firstToLowerCase()%]Mock1));
[%  }
    if (containment.isDefined()) {
        var containerVar;
        if (container.isUndefined()) {
            containerVar = "containerMock";
        }
        else {
            containerVar = containerClass.name.firstToLowerCase() + "Mock1";
        }
        if (containment_many) {%]
            Queue<[%=containment.getEReferenceType().name%]> values = [%=containerVar%].[%=containment.name%]().get();
            assertThat(values, hasItem(classUnderTest));
[%      } else {%]
            assertThat([%=containerVar%].[%=containment.name%]().get(), is(classUnderTest));
[%      }
    } %]
	    }
	    
[%=out.startPreserve("Ignore" + self.name + "Attributes", true)%]	    
	    @Ignore
[%=out.stopPreserve()%]	    
	    @Test
        public void test[%=self.name%]Attributes() throws Exception {
[%=self.initClassUnderTest(containerClass, containment, contReferenceClass, contReferenceVar, container)%]
[%=out.startPreserve(self.name + "Attributes", true)%]
            // TODO Add test code for parameters (to hard to generate correct code for any type).                    
[%=out.stopPreserve()%]
        }

[%  if (container.isDefined()) {
        var mockContainer = container.getEReferenceType().name.firstToLowerCase() + "Mock";
        %]        
        @Test
        public void test[%=self.name%]Create[%=container.name.firstToUpperCase()%]Conflict() throws Exception {
[%=self.initClassUnderTest(containerClass, containment, contReferenceClass, contReferenceVar, container)%]
[%      if (containment.isDefined()) {%]
            [%=contReferenceVar%]2 = new [%=contReferenceClass%]Impl([%=mockContainer%]2);
            expect([%=mockContainer%]2.[%=containment.name%]()).andReturn([%=contReferenceVar%]2).anyTimes();
            replay([%=mockContainer%]2);
[%      }%]        
            boolean result = classUnderTest.[%=container.name%]().create([%=mockContainer%]2);
            assertFalse(result);
        }
        
        @Test
        public void test[%=self.name%]Destroy[%=container.name.firstToUpperCase()%]() throws Exception {
[%=self.initClassUnderTest(containerClass, containment, contReferenceClass, contReferenceVar, container)%]
            boolean result = classUnderTest.[%=container.name%]().destroy([%=mockContainer%]1);
            assertTrue(result);
        }
        
        @Test
        public void test[%=self.name%]DestroyAndCreate[%=container.name.firstToUpperCase()%]() throws Exception {
[%=self.initClassUnderTest(containerClass, containment, contReferenceClass, contReferenceVar, container)%]
[%      if (containment.isDefined()) {%]
            [%=contReferenceVar%]2 = new [%=contReferenceClass%]Impl([%=mockContainer%]2);
            expect([%=mockContainer%]2.[%=containment.name%]()).andReturn([%=contReferenceVar%]2).anyTimes();
            replay([%=mockContainer%]2);
[%      }%]  
            boolean result = classUnderTest.[%=container.name%]().destroy([%=mockContainer%]1);
            assertTrue(result);
            result = classUnderTest.[%=container.name%]().create([%=mockContainer%]2);
            assertTrue(result);
            result = classUnderTest.[%=container.name%]().create([%=mockContainer%]2);
            assertFalse(result);
            result = classUnderTest.[%=container.name%]().create([%=mockContainer%]1);
            assertFalse(result);
        }
        
[%  }%]
[%  for (er in self.getEAllReferences().excluding(container)) {
        var erTargetMock = er.getEReferenceType().name.firstToLowerCase() + "Mock";
        var opp;
        var oppClass;
        var oppVar;
        if (er.getEOpposite().isDefined()) {
            opp = er.getEOpposite();
            oppClass = opp.getEContainingClass().name + "Has" + opp.name.firstToUpperCase();
            oppVar = oppClass.firstToLowerCase();
        }
        var mockTarget = erTargetMock + "1";
        if (er.isRequired() and not er.isMany()) {
            mockTarget = "_" + er.name;
        }
        %]
        @Test
        public void test[%=self.name%]Create[%=er.getEReferenceType().name%]() throws Exception {
[%=self.initClassUnderTest(containerClass, containment, contReferenceClass, contReferenceVar, container)%]
[%      if (er.getEOpposite().isDefined()) {%]
            [%=oppVar%]1 = new [%=oppClass%]Impl([%=erTargetMock%]1);
            expect([%=erTargetMock%]1.[%=opp.name%]()).andReturn([%=oppVar%]1).anyTimes();
            replay([%=erTargetMock%]1);
[%      }%]
[%      if (er.getEOpposite().isDefined()) {%]
            [%=oppVar%]2 = new [%=oppClass%]Impl([%=erTargetMock%]2);
            expect([%=erTargetMock%]2.[%=opp.name%]()).andReturn([%=oppVar%]2).anyTimes();
            replay([%=erTargetMock%]2);
[%      }%]
            boolean result;
[%      if (not (er.isRequired() and not er.isMany())) {%]
            result = classUnderTest.[%=er.name%]().create([%=mockTarget%]);
            assertTrue(result);
[%      }%]
            result = classUnderTest.[%=er.name%]().create([%=erTargetMock%]2);
[%      if (er.isMany()){%]
            assertTrue(result);
[%      } else {%]
            assertFalse(result);
[%      }%]
            result = classUnderTest.[%=er.name%]().create([%=mockTarget%]);
            assertFalse(result);
        }
        
        @Test
        public void test[%=self.name%]Destroy[%=er.getEReferenceType().name%]() throws Exception {
[%=self.initClassUnderTest(containerClass, containment, contReferenceClass, contReferenceVar, container)%]
[%      if (er.getEOpposite().isDefined()) {%]
            [%=oppVar%]1 = new [%=oppClass%]Impl([%=erTargetMock%]1);
            expect([%=erTargetMock%]1.[%=opp.name%]()).andReturn([%=oppVar%]1).anyTimes();
            replay([%=erTargetMock%]1);
[%      }%]
[%      if (not (er.isRequired() and not er.isMany())) {%]
            classUnderTest.[%=er.name%]().create([%=mockTarget%]);
[%      }%]
            boolean result = classUnderTest.[%=er.name%]().destroy([%=mockTarget%]);
            assertTrue(result);
[%  if (er.isMany()) {%]
            assertThat(classUnderTest.[%=er.name%]().get(), not(hasItem([%=erTargetMock%]1)));
[%  } else {%]
            assertThat(classUnderTest.[%=er.name%]().get(), is(nullValue()));
[%  }%]
[%      if (er.getEOpposite().isDefined()) {%]
            [%=oppVar%]2 = new [%=oppClass%]Impl([%=erTargetMock%]2);
            expect([%=erTargetMock%]2.[%=opp.name%]()).andReturn([%=oppVar%]2).anyTimes();
            replay([%=erTargetMock%]2);
[%      }%]
            result = classUnderTest.[%=er.name%]().destroy([%=erTargetMock%]2);
            assertFalse(result);
        }
[%}%]
    }
[%}
@template
operation EClass initClassUnderTest(containerClass, containment, contReferenceClass, contReferenceVar, container) {
    var mockContainer; 
    if (containerClass.isDefined()) {
        if (container.isUndefined()) {
            mockContainer = "containerMock";
        } else {
            mockContainer = containerClass.name.firstToLowerCase() + "Mock1";
        }%]
            [%=contReferenceVar%]1 = new [%=contReferenceClass%]Impl([%=mockContainer%]);
            expect([%=mockContainer%].[%=containment.name%]()).andReturn([%=contReferenceVar%]1).anyTimes();
            replay([%=mockContainer%]);
[%}%]
[%for (rf in self.getRequiredFeatures()) {%]
            [%=rf.getEReferenceType().name%] _[%=rf.name%] = mock([%=rf.getEReferenceType().name%].class);
[%}%]
[%  // Assumes all parameters are Strings!
    var params = self.getIndexAttributes().collect(a | '"' + a.name + '"');
    // We need a mock for the Required EReferences used in the constructor
    params.addAll(self.getRequiredFeatures().collect(a | "_" + a.name));
    if (containerClass.isDefined()) {
        params.add(mockContainer);
    }
    if (params.isEmpty()) {
        params = "";
    }
    else {
        params = params.concat(", ");
    }%]
            classUnderTest = new [%=self.name%]Impl([%=params%]);
[%}
%]